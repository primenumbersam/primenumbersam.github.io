{"title":"Equity Lifecycle","markdown":{"yaml":{"title":"Equity Lifecycle","subtitle":"Markov chain model for Open system","author":"GitSAM","date":"04/07/2025","abstract":"This study examines","keywords":["survivorship bias","truncation","conservative system"],"jupyter":"python3","execute":{"enabled":true,"echo":true,"warning":false,"message":false},"format":{"revealjs":{"code-fold":true,"theme":"simple","slide-number":true,"transition":"slide"}},"license":"CC BY-NC-SA"},"headingText":"Data Pre-Processing","containsRefs":false,"markdown":"\n\n\n```{python}\nimport numpy as np\nimport pandas as pd\n\nimport sqlite3\ncon = sqlite3.connect(database=\"../../tbtf.sqlite\")\n\ncrsp = pd.read_sql_query(\n  sql=\"SELECT * FROM crsp\",\n  con=con,\n  parse_dates={\"date\"}\n)\n\nimport sys\nimport os\n# 현재 경로 기준으로 상위 디렉토리로 경로 추가\nsys.path.append(os.path.abspath('../..'))\n\nimport tbtf_data\n\nff3 = tbtf_data.load_ff3_factors(start_date=crsp['date'].min(), end_date=crsp['date'].max())\ncrsp_trunc = tbtf_data.crsp_truncation(crsp,ff3)\ncrsp_full = tbtf_data.crsp_lifecycle(crsp_trunc)\n\ncrsp_full.head()\n```\n\n## Life Type of Firms\n\n```{python}\n# crsp_full[crsp_full['permno']==90848] \n# permno, 제대로된 lifetype, 현재 lifetype, 현재 life, 입력 crsp_trunc 레코드가 2개 존재함\n# 30330, old-death, lifetype=old-death,life=2, first record date = sample_start\n# 14252, shell, lifetype= normal, life=2, sample_start < first record date < sample_end\n# 13010, shell, lifetype= normal, life=2, sample_start < first record date < sample_end\n# 90848, shell, lifetype= normal, life=2, sample_start < first record date < sample_end\n# Refco Inc, 90848\n\n# permno, 제대로된 lifetype, 현재 lifetype, 현재 life, 이 경우는 입력 crsp_trunc 레코드가 1개만 존재함\n# 15139, young-living, lifetype= shell, life=1, first record date = sample_end\n# 16815\n# crsp[crsp['permno']==14475] # Super Micro Computer (SMCI)라는 회사만 2019 상장폐지 후 2020년 재상장시 Permno (14475)가 유지되었다\n\nresult = crsp_full.groupby('lifetype')['permno'].nunique()\nprint(result)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Group by permno to get unique records for plotting (1 row per permno)\npermno_summary = (\n    crsp_full.sort_values(\"date\")\n    .groupby(\"permno\", as_index=False)\n    .first()\n    [[\"permno\", \"industry\", \"lifetype\", \"life\", \"state\"]]\n)\n```\n\n## Life for Each Lifetype by Industry \n\n```{python}\n# FacetGrid 생성\ng = sns.FacetGrid(permno_summary, col=\"industry\", col_wrap=4, height=4, sharex=False, sharey=False)\n\n# industry 이름 리스트\nindustry_names = g.col_names\n\n# 각 subplot에 대해 데이터 분할 및 그리기\nfor ax, industry in zip(g.axes.flat, industry_names):\n    data = permno_summary[permno_summary['industry'] == industry]\n    for lifetype, lifetype_data in data.groupby('lifetype'):\n        ax.hist(lifetype_data['life'], bins=20, alpha=0.7, label=lifetype)\n    ax.set_title(industry)\n    ax.legend()\n\nplt.tight_layout()\nplt.show()\n```\n\n\n## Permno Count by Industry for lifetypes\n```{python}\n\n# 주요 lifetype만 사용\nmain_lifetypes = ['old-living', 'old-death', 'young-living', 'normal']\nfiltered_data = permno_summary[permno_summary['lifetype'].isin(main_lifetypes)]\n\n# industry 순서: old-death 기준\nindustry_order = (\n    filtered_data[filtered_data['lifetype'] == 'old-death']['industry']\n    .value_counts()\n    .index.tolist()\n)\n\n# 전체 industry 목록 확보\nall_industries = filtered_data['industry'].unique().tolist()\n\n# industry에 대한 색상 팔레트 생성\npalette_colors = sns.color_palette(\"tab20\", len(all_industries))\npalette = dict(zip(all_industries, palette_colors))\n\n# y축 최대값: old-death 기준\ny_max = (\n    filtered_data[filtered_data['lifetype'] == 'old-death']['industry']\n    .value_counts()\n    .max()\n)\n\n# 서브플롯 설정\nfig, axes = plt.subplots(2, 2, figsize=(14, 8))\naxes = axes.flatten()\n\nfor i, lifetype in enumerate(main_lifetypes):\n    ax = axes[i]\n    subset = filtered_data[filtered_data['lifetype'] == lifetype]\n    sns.countplot(\n        data=subset,\n        x='industry',\n        hue='industry',\n        order=industry_order,\n        palette=palette,\n        ax=ax\n    )\n    ax.set_title(f\"Permno Count by Industry for lifetype={lifetype}\")\n    ax.set_ylabel(\"Count\")\n    ax.set_ylim(0, y_max + 5)\n    ax.tick_params(axis='x', rotation=45)\n    ax.set_xlabel(\"Industry\")\n\n# 여분 subplot 제거\nfor j in range(len(main_lifetypes), len(axes)):\n    fig.delaxes(axes[j])\n\nplt.tight_layout()\nplt.show()\n\n```\n\n## Permno Count by Initial State (New Listings Only) for Each Industry\n```{python}\n\n# in-sample 신규 상장된 permno\nin_sample_types = ['normal', 'young-living', 'shell']\nin_sample_df = permno_summary[permno_summary['lifetype'].isin(in_sample_types)]\n\n# 산업 순서 정의\nindustry_order = ['Manufacturing', 'Finance', 'Services', 'Retail', 'Transportation',\n                  'Mining', 'Wholesale', 'Utilities', 'Construction', 'Agriculture',\n                  'Public', 'Missing']\n\n# subplot 설정\nn_cols = 4\nn_rows = (len(industry_order) + n_cols - 1) // n_cols\nfig, axes = plt.subplots(n_rows, n_cols, figsize=(14, 8), sharey=True)\naxes = axes.flatten()\n\nfor i, industry in enumerate(industry_order):\n    ax = axes[i]\n    subset = in_sample_df[in_sample_df['industry'] == industry]\n    if subset.empty:\n        ax.set_title(industry)\n        ax.axis('off')\n        continue\n    sns.countplot(data=subset, x='state', ax=ax, order=sorted(subset['state'].dropna().unique()), color='skyblue')\n    ax.set_title(industry)\n    ax.set_xlabel('Initial Decile')\n    ax.set_ylabel('Permno Counts')\n    ax.tick_params(axis='x', rotation=0)\n\n# 남는 subplot 제거\nfor j in range(i + 1, len(axes)):\n    fig.delaxes(axes[j])\n\nfig.suptitle(\"Permno Count by Initial State (New Listings Only) for Each Industry\", fontsize=16)\nfig.tight_layout(rect=[0, 0, 1, 0.96])\nplt.show()\n\n```\n\n## Life by Initial State for Each Industry (Lifetype = Normal)\n```{python}\n# 필터링: lifetype이 'normal'인 경우만\nnormal_df = permno_summary[permno_summary['lifetype'] == 'normal'].copy()\n\n# 산업 순서 지정\nindustry_order = ['Manufacturing', 'Finance', 'Services', 'Retail', 'Transportation', 'Mining',\n                  'Wholesale', 'Utilities', 'Construction', 'Agriculture', 'Public', 'Missing']\n\n# state와 life의 관계를 박스플롯으로 각 industry별 subplot 생성\nn_cols = 4\nn_rows = 3\nfig, axes = plt.subplots(n_rows, n_cols, figsize=(14, 8), sharey=True)\n\nfor ax, industry in zip(axes.flat, industry_order):\n    data = normal_df[normal_df['industry'] == industry]\n    if not data.empty and data['state'].nunique() > 0:\n        sns.boxplot(data=data, x='state', y='life', ax=ax, order=sorted(data['state'].unique()))\n        ax.set_title(industry)\n    else:\n        ax.set_visible(False)\n\n    ax.set_xlabel('Initial Decile')\n    ax.set_ylabel('Life (Months)')\n\n# 빈 subplot 제거\nfor j in range(len(industry_order), len(axes.flat)):\n    fig.delaxes(axes.flat[j])\n\nfig.suptitle(\"Life by Initial State for Each Industry (Lifetype = Normal)\", fontsize=16)\nplt.tight_layout(rect=[0, 0, 1, 0.96])\nplt.show()\n```\n\n## Median Life per Initial State by Industry (Lifetype=Normal)\n```{python}\n# lifetype이 'normal'인 permno만 필터링\nnormal_df = permno_summary[permno_summary['lifetype'] == 'normal'].copy()\n\n# subplot 순서 지정\nindustry_order = ['Manufacturing', 'Finance', 'Services', 'Retail', 'Transportation',\n                  'Mining', 'Wholesale', 'Utilities', 'Construction',\n                  'Agriculture', 'Public', 'Missing']\n\n# 산업과 state별로 median life 계산\ngrouped = normal_df.groupby(['industry', 'state'])['life'].median().reset_index()\n\n# plotting\nn_cols = 4\nn_rows = 3\nfig, axes = plt.subplots(n_rows, n_cols, figsize=(14, 8), sharey=True)\naxes = axes.flatten()\n\nfor i, industry in enumerate(industry_order):\n    ax = axes[i]\n    data = grouped[grouped['industry'] == industry]\n    if not data.empty:\n        sns.barplot(data=data, x='state', y='life', hue='state', ax=ax, palette='Blues_d', legend=False)\n        ax.set_title(industry)\n        ax.set_xlabel(\"Initial Decile\")\n        ax.set_ylabel(\"Median Life (Month)\")\n    else:\n        ax.set_visible(False)\n\nfig.suptitle(\"Median Life per Initial State by Industry (Lifetype=Normal)\", fontsize=16)\nplt.tight_layout()\nplt.show()\n```\n\n## Permno Count by Initial State per Industry (lifetype = Old-Living)\n```{python}\n# Filter only 'old-living' lifetype\nold_living_data = permno_summary[permno_summary['lifetype'] == 'old-living']\n\n# Define industry order\nindustry_order = [\n    \"Manufacturing\", \"Finance\", \"Services\", \"Retail\", \"Transportation\",\n    \"Mining\", \"Wholesale\", \"Utilities\", \"Construction\",\n    \"Agriculture\", \"Public\", \"Missing\"\n]\n\n# Set up the subplot grid\nfig, axes = plt.subplots(3, 4, figsize=(14, 8), sharey=True)\naxes = axes.flatten()\n\nfor i, industry in enumerate(industry_order):\n    ax = axes[i]\n    data = old_living_data[old_living_data[\"industry\"] == industry]\n    if not data.empty:\n        state_counts = data[\"state\"].value_counts().sort_index()\n        bar_data = pd.DataFrame({\"state\": state_counts.index, \"count\": state_counts.values})\n        sns.barplot(data=bar_data, x=\"state\", y=\"count\", ax=ax, color=\"skyblue\", order=sorted(bar_data[\"state\"].unique()))\n    ax.set_title(industry)\n    ax.set_xlabel(\"Initial Decile\")\n    ax.set_ylabel(\"Permno Count\")\n    ax.set_xticks(range(10))\n    ax.set_xticklabels(range(1, 11))\n\n# Remove any unused subplots\nfor j in range(i + 1, len(axes)):\n    fig.delaxes(axes[j])\n\nplt.suptitle(\"Permno Count by Initial State per Industry (lifetype = Old-Living)\", fontsize=16)\nplt.tight_layout(rect=[0, 0, 1, 0.96])\nplt.show()\n```\n\n## Permno Count by Initial State per Industry (lifetype = Shell)\n```{python}\n# Filter only 'shell' lifetype\nshell_data = permno_summary[permno_summary['lifetype'] == 'shell'].copy()\n\n# Define industry order\nindustry_order = [\n    \"Manufacturing\", \"Finance\", \"Services\", \"Retail\", \"Transportation\",\n    \"Mining\", \"Wholesale\", \"Utilities\", \"Construction\",\n    \"Agriculture\", \"Public\", \"Missing\"\n]\n\n# Set up the subplot grid\nfig, axes = plt.subplots(3, 4, figsize=(14, 8), sharey=True)\naxes = axes.flatten()\n\nfor i, industry in enumerate(industry_order):\n    ax = axes[i]\n    data = shell_data[shell_data[\"industry\"] == industry]\n    if not data.empty:\n        # Count state values and convert to sorted DataFrame\n        bar_data = (\n            data.groupby(\"state\")\n            .size()\n            .reindex(range(1, 11), fill_value=0)\n            .reset_index(name=\"count\")\n        )\n        sns.barplot(data=bar_data, x=\"state\", y=\"count\", ax=ax, color=\"skyblue\")\n        ax.set_xticks(range(0, 10))\n        ax.set_xticklabels(range(1, 11))\n    ax.set_title(industry)\n    ax.set_xlabel(\"Initial Decile\")\n    ax.set_ylabel(\"Permno Count\")\n\n# Remove any unused subplots\nfor j in range(i + 1, len(axes)):\n    fig.delaxes(axes[j])\n\nplt.suptitle(\"Permno Count by Initial State per Industry (lifetype = Shell)\", fontsize=16)\nplt.tight_layout(rect=[0, 0, 1, 0.96])\nplt.show()\n\n```","srcMarkdownNoYaml":"\n\n## Data Pre-Processing\n\n```{python}\nimport numpy as np\nimport pandas as pd\n\nimport sqlite3\ncon = sqlite3.connect(database=\"../../tbtf.sqlite\")\n\ncrsp = pd.read_sql_query(\n  sql=\"SELECT * FROM crsp\",\n  con=con,\n  parse_dates={\"date\"}\n)\n\nimport sys\nimport os\n# 현재 경로 기준으로 상위 디렉토리로 경로 추가\nsys.path.append(os.path.abspath('../..'))\n\nimport tbtf_data\n\nff3 = tbtf_data.load_ff3_factors(start_date=crsp['date'].min(), end_date=crsp['date'].max())\ncrsp_trunc = tbtf_data.crsp_truncation(crsp,ff3)\ncrsp_full = tbtf_data.crsp_lifecycle(crsp_trunc)\n\ncrsp_full.head()\n```\n\n## Life Type of Firms\n\n```{python}\n# crsp_full[crsp_full['permno']==90848] \n# permno, 제대로된 lifetype, 현재 lifetype, 현재 life, 입력 crsp_trunc 레코드가 2개 존재함\n# 30330, old-death, lifetype=old-death,life=2, first record date = sample_start\n# 14252, shell, lifetype= normal, life=2, sample_start < first record date < sample_end\n# 13010, shell, lifetype= normal, life=2, sample_start < first record date < sample_end\n# 90848, shell, lifetype= normal, life=2, sample_start < first record date < sample_end\n# Refco Inc, 90848\n\n# permno, 제대로된 lifetype, 현재 lifetype, 현재 life, 이 경우는 입력 crsp_trunc 레코드가 1개만 존재함\n# 15139, young-living, lifetype= shell, life=1, first record date = sample_end\n# 16815\n# crsp[crsp['permno']==14475] # Super Micro Computer (SMCI)라는 회사만 2019 상장폐지 후 2020년 재상장시 Permno (14475)가 유지되었다\n\nresult = crsp_full.groupby('lifetype')['permno'].nunique()\nprint(result)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Group by permno to get unique records for plotting (1 row per permno)\npermno_summary = (\n    crsp_full.sort_values(\"date\")\n    .groupby(\"permno\", as_index=False)\n    .first()\n    [[\"permno\", \"industry\", \"lifetype\", \"life\", \"state\"]]\n)\n```\n\n## Life for Each Lifetype by Industry \n\n```{python}\n# FacetGrid 생성\ng = sns.FacetGrid(permno_summary, col=\"industry\", col_wrap=4, height=4, sharex=False, sharey=False)\n\n# industry 이름 리스트\nindustry_names = g.col_names\n\n# 각 subplot에 대해 데이터 분할 및 그리기\nfor ax, industry in zip(g.axes.flat, industry_names):\n    data = permno_summary[permno_summary['industry'] == industry]\n    for lifetype, lifetype_data in data.groupby('lifetype'):\n        ax.hist(lifetype_data['life'], bins=20, alpha=0.7, label=lifetype)\n    ax.set_title(industry)\n    ax.legend()\n\nplt.tight_layout()\nplt.show()\n```\n\n\n## Permno Count by Industry for lifetypes\n```{python}\n\n# 주요 lifetype만 사용\nmain_lifetypes = ['old-living', 'old-death', 'young-living', 'normal']\nfiltered_data = permno_summary[permno_summary['lifetype'].isin(main_lifetypes)]\n\n# industry 순서: old-death 기준\nindustry_order = (\n    filtered_data[filtered_data['lifetype'] == 'old-death']['industry']\n    .value_counts()\n    .index.tolist()\n)\n\n# 전체 industry 목록 확보\nall_industries = filtered_data['industry'].unique().tolist()\n\n# industry에 대한 색상 팔레트 생성\npalette_colors = sns.color_palette(\"tab20\", len(all_industries))\npalette = dict(zip(all_industries, palette_colors))\n\n# y축 최대값: old-death 기준\ny_max = (\n    filtered_data[filtered_data['lifetype'] == 'old-death']['industry']\n    .value_counts()\n    .max()\n)\n\n# 서브플롯 설정\nfig, axes = plt.subplots(2, 2, figsize=(14, 8))\naxes = axes.flatten()\n\nfor i, lifetype in enumerate(main_lifetypes):\n    ax = axes[i]\n    subset = filtered_data[filtered_data['lifetype'] == lifetype]\n    sns.countplot(\n        data=subset,\n        x='industry',\n        hue='industry',\n        order=industry_order,\n        palette=palette,\n        ax=ax\n    )\n    ax.set_title(f\"Permno Count by Industry for lifetype={lifetype}\")\n    ax.set_ylabel(\"Count\")\n    ax.set_ylim(0, y_max + 5)\n    ax.tick_params(axis='x', rotation=45)\n    ax.set_xlabel(\"Industry\")\n\n# 여분 subplot 제거\nfor j in range(len(main_lifetypes), len(axes)):\n    fig.delaxes(axes[j])\n\nplt.tight_layout()\nplt.show()\n\n```\n\n## Permno Count by Initial State (New Listings Only) for Each Industry\n```{python}\n\n# in-sample 신규 상장된 permno\nin_sample_types = ['normal', 'young-living', 'shell']\nin_sample_df = permno_summary[permno_summary['lifetype'].isin(in_sample_types)]\n\n# 산업 순서 정의\nindustry_order = ['Manufacturing', 'Finance', 'Services', 'Retail', 'Transportation',\n                  'Mining', 'Wholesale', 'Utilities', 'Construction', 'Agriculture',\n                  'Public', 'Missing']\n\n# subplot 설정\nn_cols = 4\nn_rows = (len(industry_order) + n_cols - 1) // n_cols\nfig, axes = plt.subplots(n_rows, n_cols, figsize=(14, 8), sharey=True)\naxes = axes.flatten()\n\nfor i, industry in enumerate(industry_order):\n    ax = axes[i]\n    subset = in_sample_df[in_sample_df['industry'] == industry]\n    if subset.empty:\n        ax.set_title(industry)\n        ax.axis('off')\n        continue\n    sns.countplot(data=subset, x='state', ax=ax, order=sorted(subset['state'].dropna().unique()), color='skyblue')\n    ax.set_title(industry)\n    ax.set_xlabel('Initial Decile')\n    ax.set_ylabel('Permno Counts')\n    ax.tick_params(axis='x', rotation=0)\n\n# 남는 subplot 제거\nfor j in range(i + 1, len(axes)):\n    fig.delaxes(axes[j])\n\nfig.suptitle(\"Permno Count by Initial State (New Listings Only) for Each Industry\", fontsize=16)\nfig.tight_layout(rect=[0, 0, 1, 0.96])\nplt.show()\n\n```\n\n## Life by Initial State for Each Industry (Lifetype = Normal)\n```{python}\n# 필터링: lifetype이 'normal'인 경우만\nnormal_df = permno_summary[permno_summary['lifetype'] == 'normal'].copy()\n\n# 산업 순서 지정\nindustry_order = ['Manufacturing', 'Finance', 'Services', 'Retail', 'Transportation', 'Mining',\n                  'Wholesale', 'Utilities', 'Construction', 'Agriculture', 'Public', 'Missing']\n\n# state와 life의 관계를 박스플롯으로 각 industry별 subplot 생성\nn_cols = 4\nn_rows = 3\nfig, axes = plt.subplots(n_rows, n_cols, figsize=(14, 8), sharey=True)\n\nfor ax, industry in zip(axes.flat, industry_order):\n    data = normal_df[normal_df['industry'] == industry]\n    if not data.empty and data['state'].nunique() > 0:\n        sns.boxplot(data=data, x='state', y='life', ax=ax, order=sorted(data['state'].unique()))\n        ax.set_title(industry)\n    else:\n        ax.set_visible(False)\n\n    ax.set_xlabel('Initial Decile')\n    ax.set_ylabel('Life (Months)')\n\n# 빈 subplot 제거\nfor j in range(len(industry_order), len(axes.flat)):\n    fig.delaxes(axes.flat[j])\n\nfig.suptitle(\"Life by Initial State for Each Industry (Lifetype = Normal)\", fontsize=16)\nplt.tight_layout(rect=[0, 0, 1, 0.96])\nplt.show()\n```\n\n## Median Life per Initial State by Industry (Lifetype=Normal)\n```{python}\n# lifetype이 'normal'인 permno만 필터링\nnormal_df = permno_summary[permno_summary['lifetype'] == 'normal'].copy()\n\n# subplot 순서 지정\nindustry_order = ['Manufacturing', 'Finance', 'Services', 'Retail', 'Transportation',\n                  'Mining', 'Wholesale', 'Utilities', 'Construction',\n                  'Agriculture', 'Public', 'Missing']\n\n# 산업과 state별로 median life 계산\ngrouped = normal_df.groupby(['industry', 'state'])['life'].median().reset_index()\n\n# plotting\nn_cols = 4\nn_rows = 3\nfig, axes = plt.subplots(n_rows, n_cols, figsize=(14, 8), sharey=True)\naxes = axes.flatten()\n\nfor i, industry in enumerate(industry_order):\n    ax = axes[i]\n    data = grouped[grouped['industry'] == industry]\n    if not data.empty:\n        sns.barplot(data=data, x='state', y='life', hue='state', ax=ax, palette='Blues_d', legend=False)\n        ax.set_title(industry)\n        ax.set_xlabel(\"Initial Decile\")\n        ax.set_ylabel(\"Median Life (Month)\")\n    else:\n        ax.set_visible(False)\n\nfig.suptitle(\"Median Life per Initial State by Industry (Lifetype=Normal)\", fontsize=16)\nplt.tight_layout()\nplt.show()\n```\n\n## Permno Count by Initial State per Industry (lifetype = Old-Living)\n```{python}\n# Filter only 'old-living' lifetype\nold_living_data = permno_summary[permno_summary['lifetype'] == 'old-living']\n\n# Define industry order\nindustry_order = [\n    \"Manufacturing\", \"Finance\", \"Services\", \"Retail\", \"Transportation\",\n    \"Mining\", \"Wholesale\", \"Utilities\", \"Construction\",\n    \"Agriculture\", \"Public\", \"Missing\"\n]\n\n# Set up the subplot grid\nfig, axes = plt.subplots(3, 4, figsize=(14, 8), sharey=True)\naxes = axes.flatten()\n\nfor i, industry in enumerate(industry_order):\n    ax = axes[i]\n    data = old_living_data[old_living_data[\"industry\"] == industry]\n    if not data.empty:\n        state_counts = data[\"state\"].value_counts().sort_index()\n        bar_data = pd.DataFrame({\"state\": state_counts.index, \"count\": state_counts.values})\n        sns.barplot(data=bar_data, x=\"state\", y=\"count\", ax=ax, color=\"skyblue\", order=sorted(bar_data[\"state\"].unique()))\n    ax.set_title(industry)\n    ax.set_xlabel(\"Initial Decile\")\n    ax.set_ylabel(\"Permno Count\")\n    ax.set_xticks(range(10))\n    ax.set_xticklabels(range(1, 11))\n\n# Remove any unused subplots\nfor j in range(i + 1, len(axes)):\n    fig.delaxes(axes[j])\n\nplt.suptitle(\"Permno Count by Initial State per Industry (lifetype = Old-Living)\", fontsize=16)\nplt.tight_layout(rect=[0, 0, 1, 0.96])\nplt.show()\n```\n\n## Permno Count by Initial State per Industry (lifetype = Shell)\n```{python}\n# Filter only 'shell' lifetype\nshell_data = permno_summary[permno_summary['lifetype'] == 'shell'].copy()\n\n# Define industry order\nindustry_order = [\n    \"Manufacturing\", \"Finance\", \"Services\", \"Retail\", \"Transportation\",\n    \"Mining\", \"Wholesale\", \"Utilities\", \"Construction\",\n    \"Agriculture\", \"Public\", \"Missing\"\n]\n\n# Set up the subplot grid\nfig, axes = plt.subplots(3, 4, figsize=(14, 8), sharey=True)\naxes = axes.flatten()\n\nfor i, industry in enumerate(industry_order):\n    ax = axes[i]\n    data = shell_data[shell_data[\"industry\"] == industry]\n    if not data.empty:\n        # Count state values and convert to sorted DataFrame\n        bar_data = (\n            data.groupby(\"state\")\n            .size()\n            .reindex(range(1, 11), fill_value=0)\n            .reset_index(name=\"count\")\n        )\n        sns.barplot(data=bar_data, x=\"state\", y=\"count\", ax=ax, color=\"skyblue\")\n        ax.set_xticks(range(0, 10))\n        ax.set_xticklabels(range(1, 11))\n    ax.set_title(industry)\n    ax.set_xlabel(\"Initial Decile\")\n    ax.set_ylabel(\"Permno Count\")\n\n# Remove any unused subplots\nfor j in range(i + 1, len(axes)):\n    fig.delaxes(axes[j])\n\nplt.suptitle(\"Permno Count by Initial State per Industry (lifetype = Shell)\", fontsize=16)\nplt.tight_layout(rect=[0, 0, 1, 0.96])\nplt.show()\n\n```"},"formats":{"revealjs":{"identifier":{"display-name":"RevealJS","target-format":"revealjs","base-format":"revealjs"},"execute":{"fig-width":10,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":true,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter","message":false},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","html-math-method":{"method":"mathjax","url":"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.9/MathJax.js?config=TeX-AMS_HTML-full"},"slide-level":2,"to":"revealjs","output-file":"tbtf_data_plot.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.7.21","auto-stretch":true,"author":"GitSAM","date":"04/07/2025","bibliography":["references.bib"],"jupyter":"python3","title":"Equity Lifecycle","subtitle":"Markov chain model for Open system","abstract":"This study examines","keywords":["survivorship bias","truncation","conservative system"],"license":"CC BY-NC-SA","theme":"simple","slideNumber":true,"transition":"slide"}}},"projectFormats":["html"]}
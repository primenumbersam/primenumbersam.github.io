{
  "hash": "8432f487f701c1ca6c90e16faf8b2092",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Equity Lifecycle\nsubtitle: Markov chain model for Open system\nauthor: GitSAM\ndate: 04/07/2025\nkeywords: \n  - survivorship bias\n  - truncation\n  - conservative system\njupyter: python3\nexecute:\n  enabled: true\n  echo: true\n  warning: false\n  message: false\nformat:\n  revealjs:\n    code-fold: true\n    theme: simple\n    slide-number: true\n    transition: slide\nlicense: \"CC BY-NC-SA\"\n---\n\n## Data Pre-Processing\n\n::: {#de780316 .cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nimport pandas as pd\n\nimport sqlite3\ncon = sqlite3.connect(database=\"../../tbtf.sqlite\")\n\ncrsp = pd.read_sql_query(\n  sql=\"SELECT * FROM crsp\",\n  con=con,\n  parse_dates={\"date\"}\n)\n\nimport sys\nimport os\n# 현재 경로 기준으로 상위 디렉토리로 경로 추가\nsys.path.append(os.path.abspath('../..'))\n\nimport tbtf_data\n\nff3 = tbtf_data.load_ff3_factors(start_date=crsp['date'].min(), end_date=crsp['date'].max())\ncrsp_trunc = tbtf_data.crsp_truncation(crsp,ff3)\ncrsp_full = tbtf_data.crsp_lifecycle(crsp_trunc)\n\ncrsp_full.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>permno</th>\n      <th>date</th>\n      <th>mktcap</th>\n      <th>ret</th>\n      <th>primaryexch</th>\n      <th>siccd</th>\n      <th>industry</th>\n      <th>mktcap_lag</th>\n      <th>ret_excess</th>\n      <th>state</th>\n      <th>state_lag</th>\n      <th>lifetype</th>\n      <th>life</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>10001</td>\n      <td>1996-01-31</td>\n      <td>20.814125</td>\n      <td>-0.026667</td>\n      <td>Q</td>\n      <td>4925</td>\n      <td>Utilities</td>\n      <td>21.384375</td>\n      <td>-0.030967</td>\n      <td>3</td>\n      <td>0</td>\n      <td>old-death</td>\n      <td>260</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>10001</td>\n      <td>1996-02-29</td>\n      <td>21.099250</td>\n      <td>0.013699</td>\n      <td>Q</td>\n      <td>4925</td>\n      <td>Utilities</td>\n      <td>20.814125</td>\n      <td>0.009799</td>\n      <td>3</td>\n      <td>3</td>\n      <td>old-death</td>\n      <td>260</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>10001</td>\n      <td>1996-03-31</td>\n      <td>21.899480</td>\n      <td>0.036423</td>\n      <td>Q</td>\n      <td>4925</td>\n      <td>Utilities</td>\n      <td>21.099250</td>\n      <td>0.032523</td>\n      <td>3</td>\n      <td>3</td>\n      <td>old-death</td>\n      <td>260</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>10001</td>\n      <td>1996-04-30</td>\n      <td>20.348063</td>\n      <td>-0.070840</td>\n      <td>Q</td>\n      <td>4925</td>\n      <td>Utilities</td>\n      <td>21.899480</td>\n      <td>-0.075440</td>\n      <td>2</td>\n      <td>3</td>\n      <td>old-death</td>\n      <td>260</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>10001</td>\n      <td>1996-05-31</td>\n      <td>19.915125</td>\n      <td>-0.021277</td>\n      <td>Q</td>\n      <td>4925</td>\n      <td>Utilities</td>\n      <td>20.348063</td>\n      <td>-0.025477</td>\n      <td>2</td>\n      <td>2</td>\n      <td>old-death</td>\n      <td>260</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Life Type of Firms\n\n::: {#27d8304f .cell execution_count=2}\n``` {.python .cell-code}\n# crsp_full[crsp_full['permno']==90848] \n# permno, 제대로된 lifetype, 현재 lifetype, 현재 life, 입력 crsp_trunc 레코드가 2개 존재함\n# 30330, old-death, lifetype=old-death,life=2, first record date = sample_start\n# 14252, shell, lifetype= normal, life=2, sample_start < first record date < sample_end\n# 13010, shell, lifetype= normal, life=2, sample_start < first record date < sample_end\n# 90848, shell, lifetype= normal, life=2, sample_start < first record date < sample_end\n# Refco Inc, 90848\n\n# permno, 제대로된 lifetype, 현재 lifetype, 현재 life, 이 경우는 입력 crsp_trunc 레코드가 1개만 존재함\n# 15139, young-living, lifetype= shell, life=1, first record date = sample_end\n# 16815\n# crsp[crsp['permno']==14475] # Super Micro Computer (SMCI)라는 회사만 2019 상장폐지 후 2020년 재상장시 Permno (14475)가 유지되었다\n\nresult = crsp_full.groupby('lifetype')['permno'].nunique()\nprint(result)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Group by permno to get unique records for plotting (1 row per permno)\npermno_summary = (\n    crsp_full.sort_values(\"date\")\n    .groupby(\"permno\", as_index=False)\n    .first()\n    [[\"permno\", \"industry\", \"lifetype\", \"life\", \"state\"]]\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nlifetype\nnormal          5860\nold-death       5882\nold-living      1021\nshell             10\nyoung-living    3000\nName: permno, dtype: int64\n```\n:::\n:::\n\n\n## Life for Each Lifetype by Industry \n\n::: {#438beeaf .cell execution_count=3}\n``` {.python .cell-code}\n# FacetGrid 생성\ng = sns.FacetGrid(permno_summary, col=\"industry\", col_wrap=4, height=4, sharex=False, sharey=False)\n\n# industry 이름 리스트\nindustry_names = g.col_names\n\n# 각 subplot에 대해 데이터 분할 및 그리기\nfor ax, industry in zip(g.axes.flat, industry_names):\n    data = permno_summary[permno_summary['industry'] == industry]\n    for lifetype, lifetype_data in data.groupby('lifetype'):\n        ax.hist(lifetype_data['life'], bins=20, alpha=0.7, label=lifetype)\n    ax.set_title(industry)\n    ax.legend()\n\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](tbtf_data_plot_files/figure-revealjs/cell-4-output-1.png){}\n:::\n:::\n\n\n## Permno Count by Industry for lifetypes\n\n::: {#b1f9c5c1 .cell execution_count=4}\n``` {.python .cell-code}\n# 주요 lifetype만 사용\nmain_lifetypes = ['old-living', 'old-death', 'young-living', 'normal']\nfiltered_data = permno_summary[permno_summary['lifetype'].isin(main_lifetypes)]\n\n# industry 순서: old-death 기준\nindustry_order = (\n    filtered_data[filtered_data['lifetype'] == 'old-death']['industry']\n    .value_counts()\n    .index.tolist()\n)\n\n# 전체 industry 목록 확보\nall_industries = filtered_data['industry'].unique().tolist()\n\n# industry에 대한 색상 팔레트 생성\npalette_colors = sns.color_palette(\"tab20\", len(all_industries))\npalette = dict(zip(all_industries, palette_colors))\n\n# y축 최대값: old-death 기준\ny_max = (\n    filtered_data[filtered_data['lifetype'] == 'old-death']['industry']\n    .value_counts()\n    .max()\n)\n\n# 서브플롯 설정\nfig, axes = plt.subplots(2, 2, figsize=(14, 8))\naxes = axes.flatten()\n\nfor i, lifetype in enumerate(main_lifetypes):\n    ax = axes[i]\n    subset = filtered_data[filtered_data['lifetype'] == lifetype]\n    sns.countplot(\n        data=subset,\n        x='industry',\n        hue='industry',\n        order=industry_order,\n        palette=palette,\n        ax=ax\n    )\n    ax.set_title(f\"Permno Count by Industry for lifetype={lifetype}\")\n    ax.set_ylabel(\"Count\")\n    ax.set_ylim(0, y_max + 5)\n    ax.tick_params(axis='x', rotation=45)\n    ax.set_xlabel(\"Industry\")\n\n# 여분 subplot 제거\nfor j in range(len(main_lifetypes), len(axes)):\n    fig.delaxes(axes[j])\n\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](tbtf_data_plot_files/figure-revealjs/cell-5-output-1.png){}\n:::\n:::\n\n\n## Permno Count by Initial State (New Listings Only) for Each Industry\n\n::: {#0f4722b7 .cell execution_count=5}\n``` {.python .cell-code}\n# in-sample 신규 상장된 permno\nin_sample_types = ['normal', 'young-living', 'shell']\nin_sample_df = permno_summary[permno_summary['lifetype'].isin(in_sample_types)]\n\n# 산업 순서 정의\nindustry_order = ['Manufacturing', 'Finance', 'Services', 'Retail', 'Transportation',\n                  'Mining', 'Wholesale', 'Utilities', 'Construction', 'Agriculture',\n                  'Public', 'Missing']\n\n# subplot 설정\nn_cols = 4\nn_rows = (len(industry_order) + n_cols - 1) // n_cols\nfig, axes = plt.subplots(n_rows, n_cols, figsize=(14, 8), sharey=True)\naxes = axes.flatten()\n\nfor i, industry in enumerate(industry_order):\n    ax = axes[i]\n    subset = in_sample_df[in_sample_df['industry'] == industry]\n    if subset.empty:\n        ax.set_title(industry)\n        ax.axis('off')\n        continue\n    sns.countplot(data=subset, x='state', ax=ax, order=sorted(subset['state'].dropna().unique()), color='skyblue')\n    ax.set_title(industry)\n    ax.set_xlabel('Initial Decile')\n    ax.set_ylabel('Permno Counts')\n    ax.tick_params(axis='x', rotation=0)\n\n# 남는 subplot 제거\nfor j in range(i + 1, len(axes)):\n    fig.delaxes(axes[j])\n\nfig.suptitle(\"Permno Count by Initial State (New Listings Only) for Each Industry\", fontsize=16)\nfig.tight_layout(rect=[0, 0, 1, 0.96])\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](tbtf_data_plot_files/figure-revealjs/cell-6-output-1.png){}\n:::\n:::\n\n\n## Life by Initial State for Each Industry (Lifetype = Normal)\n\n::: {#2041c87e .cell execution_count=6}\n``` {.python .cell-code}\n# 필터링: lifetype이 'normal'인 경우만\nnormal_df = permno_summary[permno_summary['lifetype'] == 'normal'].copy()\n\n# 산업 순서 지정\nindustry_order = ['Manufacturing', 'Finance', 'Services', 'Retail', 'Transportation', 'Mining',\n                  'Wholesale', 'Utilities', 'Construction', 'Agriculture', 'Public', 'Missing']\n\n# state와 life의 관계를 박스플롯으로 각 industry별 subplot 생성\nn_cols = 4\nn_rows = 3\nfig, axes = plt.subplots(n_rows, n_cols, figsize=(14, 8), sharey=True)\n\nfor ax, industry in zip(axes.flat, industry_order):\n    data = normal_df[normal_df['industry'] == industry]\n    if not data.empty and data['state'].nunique() > 0:\n        sns.boxplot(data=data, x='state', y='life', ax=ax, order=sorted(data['state'].unique()))\n        ax.set_title(industry)\n    else:\n        ax.set_visible(False)\n\n    ax.set_xlabel('Initial Decile')\n    ax.set_ylabel('Life (Months)')\n\n# 빈 subplot 제거\nfor j in range(len(industry_order), len(axes.flat)):\n    fig.delaxes(axes.flat[j])\n\nfig.suptitle(\"Life by Initial State for Each Industry (Lifetype = Normal)\", fontsize=16)\nplt.tight_layout(rect=[0, 0, 1, 0.96])\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](tbtf_data_plot_files/figure-revealjs/cell-7-output-1.png){}\n:::\n:::\n\n\n## Median Life per Initial State by Industry (Lifetype=Normal)\n\n::: {#40da85d1 .cell execution_count=7}\n``` {.python .cell-code}\n# lifetype이 'normal'인 permno만 필터링\nnormal_df = permno_summary[permno_summary['lifetype'] == 'normal'].copy()\n\n# subplot 순서 지정\nindustry_order = ['Manufacturing', 'Finance', 'Services', 'Retail', 'Transportation',\n                  'Mining', 'Wholesale', 'Utilities', 'Construction',\n                  'Agriculture', 'Public', 'Missing']\n\n# 산업과 state별로 median life 계산\ngrouped = normal_df.groupby(['industry', 'state'])['life'].median().reset_index()\n\n# plotting\nn_cols = 4\nn_rows = 3\nfig, axes = plt.subplots(n_rows, n_cols, figsize=(14, 8), sharey=True)\naxes = axes.flatten()\n\nfor i, industry in enumerate(industry_order):\n    ax = axes[i]\n    data = grouped[grouped['industry'] == industry]\n    if not data.empty:\n        sns.barplot(data=data, x='state', y='life', hue='state', ax=ax, palette='Blues_d', legend=False)\n        ax.set_title(industry)\n        ax.set_xlabel(\"Initial Decile\")\n        ax.set_ylabel(\"Median Life (Month)\")\n    else:\n        ax.set_visible(False)\n\nfig.suptitle(\"Median Life per Initial State by Industry (Lifetype=Normal)\", fontsize=16)\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](tbtf_data_plot_files/figure-revealjs/cell-8-output-1.png){}\n:::\n:::\n\n\n## Permno Count by Initial State per Industry (lifetype = Old-Living)\n\n::: {#5ff228e7 .cell execution_count=8}\n``` {.python .cell-code}\n# Filter only 'old-living' lifetype\nold_living_data = permno_summary[permno_summary['lifetype'] == 'old-living']\n\n# Define industry order\nindustry_order = [\n    \"Manufacturing\", \"Finance\", \"Services\", \"Retail\", \"Transportation\",\n    \"Mining\", \"Wholesale\", \"Utilities\", \"Construction\",\n    \"Agriculture\", \"Public\", \"Missing\"\n]\n\n# Set up the subplot grid\nfig, axes = plt.subplots(3, 4, figsize=(14, 8), sharey=True)\naxes = axes.flatten()\n\nfor i, industry in enumerate(industry_order):\n    ax = axes[i]\n    data = old_living_data[old_living_data[\"industry\"] == industry]\n    if not data.empty:\n        state_counts = data[\"state\"].value_counts().sort_index()\n        bar_data = pd.DataFrame({\"state\": state_counts.index, \"count\": state_counts.values})\n        sns.barplot(data=bar_data, x=\"state\", y=\"count\", ax=ax, color=\"skyblue\", order=sorted(bar_data[\"state\"].unique()))\n    ax.set_title(industry)\n    ax.set_xlabel(\"Initial Decile\")\n    ax.set_ylabel(\"Permno Count\")\n    ax.set_xticks(range(10))\n    ax.set_xticklabels(range(1, 11))\n\n# Remove any unused subplots\nfor j in range(i + 1, len(axes)):\n    fig.delaxes(axes[j])\n\nplt.suptitle(\"Permno Count by Initial State per Industry (lifetype = Old-Living)\", fontsize=16)\nplt.tight_layout(rect=[0, 0, 1, 0.96])\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](tbtf_data_plot_files/figure-revealjs/cell-9-output-1.png){}\n:::\n:::\n\n\n## Permno Count by Initial State per Industry (lifetype = Shell)\n\n::: {#9f8ac976 .cell execution_count=9}\n``` {.python .cell-code}\n# Filter only 'shell' lifetype\nshell_data = permno_summary[permno_summary['lifetype'] == 'shell'].copy()\n\n# Define industry order\nindustry_order = [\n    \"Manufacturing\", \"Finance\", \"Services\", \"Retail\", \"Transportation\",\n    \"Mining\", \"Wholesale\", \"Utilities\", \"Construction\",\n    \"Agriculture\", \"Public\", \"Missing\"\n]\n\n# Set up the subplot grid\nfig, axes = plt.subplots(3, 4, figsize=(14, 8), sharey=True)\naxes = axes.flatten()\n\nfor i, industry in enumerate(industry_order):\n    ax = axes[i]\n    data = shell_data[shell_data[\"industry\"] == industry]\n    if not data.empty:\n        # Count state values and convert to sorted DataFrame\n        bar_data = (\n            data.groupby(\"state\")\n            .size()\n            .reindex(range(1, 11), fill_value=0)\n            .reset_index(name=\"count\")\n        )\n        sns.barplot(data=bar_data, x=\"state\", y=\"count\", ax=ax, color=\"skyblue\")\n        ax.set_xticks(range(0, 10))\n        ax.set_xticklabels(range(1, 11))\n    ax.set_title(industry)\n    ax.set_xlabel(\"Initial Decile\")\n    ax.set_ylabel(\"Permno Count\")\n\n# Remove any unused subplots\nfor j in range(i + 1, len(axes)):\n    fig.delaxes(axes[j])\n\nplt.suptitle(\"Permno Count by Initial State per Industry (lifetype = Shell)\", fontsize=16)\nplt.tight_layout(rect=[0, 0, 1, 0.96])\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](tbtf_data_plot_files/figure-revealjs/cell-10-output-1.png){}\n:::\n:::\n\n\n",
    "supporting": [
      "tbtf_data_plot_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}
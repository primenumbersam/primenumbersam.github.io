---
title: Empirical Model
subtitle: 08 Implementation
---

전체 실증 연구의 **재현 가능성(reproducibility)**과 **코드–논문 간 연결성(mapping)**을 보장

1. 전체 워크플로우 요약 (Workflow Overview)  
2. 사용한 언어 및 라이브러리 목록 (Environment & Packages)  
3. 주요 Jupyter Notebook 목록 및 각 분석 파트와의 매핑 (Notebook Structure)  
4. 그래프, 테이블 파일 저장 구조 안내 (Output Artifacts)  
5. 재현을 위한 실행 방식 안내 (Reproducibility)

# Implementation Notes

This section summarizes the technical details of the implementation, including programming environment, data processing tools, and notebook structure. The entire empirical workflow was executed using Python and organized into modular Jupyter notebooks.

## 1. Programming Environment

All analyses were conducted in Python 3. The core packages used are:

- **Data Processing**: `pandas`, `numpy`
- **Statistical Modeling**: `statsmodels`, `scipy`, `sklearn`
- **Visualization**: `matplotlib`, `seaborn`, `plotly`

Additional tools include `quarto` for documentation integration and `joblib`/`multiprocessing` for parallel computation in robustness tests.

## 2. Notebook Structure

The analysis was modularized into separate notebooks, each corresponding to a core component of the empirical strategy. The mapping between notebooks and sections of the paper is as follows:

| Notebook File              | Description                                                       | Related Section             |
|---------------------------|-------------------------------------------------------------------|-----------------------------|
| `02_data.ipynb`           | Load and clean CRSP & FF data, handle delisting and NaNs         | Section 2 – Data            |
| `03_ff_compare.ipynb`     | Analyze FF size deciles: distribution, Sharpe dynamics           | Section 3 – FF Benchmark    |
| `04_structure.ipynb`      | Capital convexity, mixture modeling, and Markov transitions      | Section 4 – Structural      |
| `05_strategy.ipynb`       | Implement TBTF What–How–When logic, portfolio generator          | Section 5 – Strategy        |
| `06_performance.ipynb`    | Risk-adjusted performance vs. indices and ETFs                   | Section 6 – Performance     |
| `07_robustness.ipynb`     | Varying n, frequency, sample splits, alternative weights         | Section 7 – Robustness      |

Each notebook contains reusable functions for loading, constructing, and evaluating portfolios, making the workflow easily reproducible.

## 3. Output Artifacts

All result files—figures and tables—are stored in the following structure:

- `figs/`: All figures (e.g., PNG/HTML for Quarto embedding)
- `tables/`: Summary statistics and transition matrices (CSV/HTML)
- File naming convention:  
  - `sharpe_curve_s10_b10.png`, `mixture_tbtf_post2010.png`  
  - `transition_matrix_tbtf.csv`, `summary_stats_tbtf.html`

These are linked in the corresponding `.qmd` sections using relative paths for seamless integration.

## 4. Reproducibility

To replicate the analysis:

1. Clone the repository and install dependencies (via `pip install -r requirements.txt`)
2. Download CRSP/Compustat data from WRDS (with appropriate credentials)
3. Run notebooks in the order shown above or use batch rendering via `papermill` or `quarto`
4. Render full manuscript via:

```bash
quarto render
```

Optional scripts for batch portfolio construction and robustness testing (e.g., multiprocessing-based grid search) are located in `/scripts`.

---

## Appendix {.appendix}

### requirements.txt

```txt
pandas>=1.5
numpy>=1.22
scikit-learn>=1.3
matplotlib>=3.6
seaborn>=0.12
statsmodels>=0.13
scipy>=1.10
plotly>=5.10
quarto>=1.3
```
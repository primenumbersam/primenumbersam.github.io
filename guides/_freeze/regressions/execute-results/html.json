{
  "hash": "9bf1c501e359af3101a73b08ac1c3356",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: GMM and OLS as Geometry of error space\nsubtitle: Inner Product Spaces (Linear vs. Curved Structures)\nauthor: gitSAM\ndate: '2025-03-21'\nformat:\n  html:\n    code-fold: true\n    toc: true\njupyter: python3\n---\n\n\n\n\nThis short study is designed to explain the structural difference between **Ordinary Least Squares (OLS)** and the **Generalized Method of Moments (GMM)** from a geometric and mathematical standpoint, emphasizing their foundations in inner product spaces, with an analogy to **Einstein's Field Equations** in general relativity. This analogy would be powerful not only for deep mathematical understanding but also for teaching estimation theory with geometric and physical intuition.\n\n> \"In economics, GMM reshapes the geometry of estimation just as Einstein’s metric reshapes the geometry of spacetime.\"\n\n## 1. OLS \n\n### Orthogonal Projection in Euclidean Space\n\nOLS solves the following problem:\n\n$$\n\\hat{\\beta}_{OLS} = \\arg\\min_\\beta \\| y - X\\beta \\|_2^2 = (X^\\top X)^{-1} X^\\top y\n$$\n\n- This corresponds to projecting $y$ orthogonally onto the column space of $X$.\n- The residual $\\varepsilon = y - X\\hat{\\beta}$ satisfies:\n\n$$\nX^\\top \\varepsilon = 0\n$$\n\n### Inner Product and Geometry\n\n- The $L^2$ norm used in OLS is induced by the **standard Euclidean inner product**:\n\n$$\n\\langle u, v \\rangle = u^\\top v\n$$\n\n- The distance function becomes:\n\n$$\n\\| u \\|_2 = \\sqrt{u^\\top u}\n$$\n\n- The set of parameter values yielding equal error defines a level set (isocurve):\n\n$$\n\\{ \\beta \\mid \\| y - X\\beta \\|_2^2 = c \\} \\Rightarrow \\text{spheres in parameter space}\n$$\n\n- This reflects **Pythagorean geometry** — the isocurves are **circles (in 2D), spheres (in 3D), or hyperspheres** in higher dimensions.\n\n## 2. GMM\n\n### Weighted Projection via Positive Definite Kernel\n\nGMM generalizes the idea by allowing estimation over a broader space defined by arbitrary moment conditions:\n\n$$\n\\hat{\\theta}_{GMM} = \\arg\\min_\\theta \\left[ \\bar{g}_n(\\theta)^\\top W \\bar{g}_n(\\theta) \\right]\n$$\n\nwhere:\n\n- $\\bar{g}_n(\\theta) = \\frac{1}{n} \\sum_{i=1}^n g(Z_i, \\theta)$\n- $W$ is a **positive definite weighting matrix**, often an estimate of the optimal variance-covariance structure\n\n### Generalized Inner Product and Geometry\n\n- GMM defines a new inner product:\n\n$$\n\\langle u, v \\rangle_W = u^\\top W v \\quad \\text{with } W \\succ 0\n$$\n\n- The corresponding norm is:\n\n$$\n\\| u \\|_W = \\sqrt{u^\\top W u}\n$$\n\n- The isocurves of the GMM objective:\n\n$$\n\\{ \\theta \\mid \\bar{g}_n(\\theta)^\\top W \\bar{g}_n(\\theta) = c \\} \\Rightarrow \\text{ellipsoids in parameter space}\n$$\n\nThus, unlike OLS, **GMM does not treat all directions equally**; the weighting matrix $W$ skews the geometry so that errors in some directions are penalized more.\n\n## 3. Visual and Geometric Summary\n\n| Concept | OLS | GMM |\n|--------|-----|-----|\n| Inner product | $\\langle u, v \\rangle$ | $\\langle u, v \\rangle_W = u^\\top W v$ |\n| Norm | Euclidean ($L^2$) | Mahalanobis-like ($W$-norm) |\n| Isocurve shape | Circle / Sphere | Ellipse / Ellipsoid |\n| Geometry | Uniform in all directions | Anisotropic (weighted directions) |\n\n> **OLS minimizes error under the geometry of circles.**  \n> **GMM minimizes error under the geometry of ellipses.**\n\n## 4. Einstein Field Equations and GMM: Structural Analogy\n\nEinstein’s Field Equations (EFE) in general relativity:\n\n$$\nG_{\\mu\\nu} = R_{\\mu\\nu} - \\frac{1}{2} R g_{\\mu\\nu} = 8\\pi T_{\\mu\\nu}\n$$\n\nwhere:\n\n- $T_{\\mu\\nu}$: Stress-energy tensor, representing energy and matter (matter-energy distribution)\n- $G_{\\mu\\nu}$: Einstein tensor, encoding the curvature of spacetime (curvature)\n  - $R_{\\mu\\nu}$: Ricci curvature tensor\n  - $R$: Scalar curvature\n  - $g_{\\mu\\nu}$: Metric tensor, defining the inner product in spacetime and governing geodesics\n\n### Analogy to Estimation Frameworks\n\n| Feature | OLS | GMM | EFE (Physics) |\n|--------|-----|-----|----------------|\n| Space | Euclidean | Kernel-defined | Curved spacetime |\n| Inner product | $I$ | $W$ (kernel) | $g_{\\mu\\nu}$ (metric) |\n| Projection | Orthogonal | Weighted / Generalized | Energy-curvature balance |\n| Level sets | Circles | Ellipses | Lightcones / geodesics |\n\n### Additional Explanation\n\nIn EFE, the metric tensor $g_{\\mu\\nu}$ defines how distances and angles are measured — it is the analogue of a positive definite kernel in GMM. The field equations determine how the geometry (curvature) of spacetime reacts to matter and energy. In this sense, **spacetime is optimized or shaped in response to external inputs**, just as GMM shapes its estimation space based on the kernel $W$ and moment functions.\n\nThe level sets in general relativity are often visualized as **lightcones** — the surface separating causal influence from spacelike separation. Geometrically, a lightcone can be interpreted as the **degenerate case of a conic section**, where the quadric form\n\n$$\nQ(x) = x^\\top g_{\\mu\\nu} x = 0\n$$\n\nresults in a **pair of intersecting lines**: this represents all null (light-like) directions emanating from a point. These are the boundary cases between time-like and space-like intervals, analogous to the way ellipsoids in GMM collapse into degenerate forms under singular kernel matrices.\n\nThus, in both GMM and EFE, the **shape and degeneracy of level sets** encode deep information about the underlying structure — whether it is a statistical model or the geometry of spacetime.\n\n\n### Analogy to Estimation Frameworks\n\n| Feature | OLS | GMM | EFE (Physics) |\n|--------|-----|-----|----------------|\n| Space | Euclidean | Kernel-defined | Curved spacetime |\n| Inner product | $I$ | $W$ (kernel) | $g_{\\mu\\nu}$ (metric) |\n| Projection | Orthogonal | Weighted / Generalized | Energy-curvature balance |\n| Level sets | Circles | Ellipses | Lightcones / geodesics |\n\nIn all three cases, the key structure-defining object ($I$, $W$, or $g_{\\mu\\nu}$) defines **how vectors are compared**, **how error or curvature is measured**, and **how optimization or balance occurs**.\n\n## 5. Conclusion\n\n- OLS and GMM are not just estimation techniques, but **geometric procedures** grounded in inner product space theory.\n- OLS relies on **Euclidean projection**, yielding circular/spherical symmetry.\n- GMM generalizes the space through a **positive definite kernel**, yielding elliptical contours and emphasizing certain directions.\n- This parallels how general relativity defines geometry via the metric tensor, adapting the very notion of measurement to the structure of the system.\n\n\n## Visuals\n\n### OLS vs GMM : 동일한 선형 회귀 구조에서도 서로 다른 projection\n\n설정 요약:\n\n- **데이터 생성**:  \n  - $y = \\beta_0 + \\beta_1 x + \\varepsilon$\n  - 잡음 $\\varepsilon$는 $x$의 값이 커질수록 **분산이 커지는 이질적(heteroskedastic)** 형태로 생성\n- **OLS**:  \n  - 모든 관측값을 동일한 중요도로 간주하여 잔차 제곱합을 최소화. 즉, **평균적인 방향**으로 선을 맞춤.\n  - OLS는 전체 데이터를 **균등하게 반영**하며, 잡음이 큰 부분에서도 기울기가 영향을 받음.\n- **GMM**:  \n  - 잔차의 분산(또는 신뢰도)에 따라 가중치 **positive definite weighting**를 달리 부여. 이 경우 분산의 역수를 사용하여 노이즈가 적은 관측값을 더 신뢰하도록 추정.\n  - GMM은 **잡음이 작은 구간(왼쪽)**의 패턴에 더 많은 가중치를 부여하여 기울기가 더 가파르게 추정\n\n::: {#55873fee .cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Simulate data with heteroskedastic noise (to favor GMM adjustment)\nnp.random.seed(0)\nn = 100\nx = np.linspace(0, 10, n)\nX = np.vstack([np.ones(n), x]).T\n\n# True model\nbeta_true = np.array([1, 2])\n# Heteroskedastic noise: variance increases with x\nnoise_std = 0.5 + 1.5 * (x / x.max())  # ranges from 0.5 to 2.0\ny = X @ beta_true + np.random.normal(0, noise_std)\n\n# OLS estimation\nbeta_ols = np.linalg.inv(X.T @ X) @ X.T @ y\ny_hat_ols = X @ beta_ols\n\n# GMM weighting: inverse of variance (precision weighting)\nW = np.diag(1 / noise_std**2)\n\n# GMM estimation (optimal weighting under heteroskedasticity)\nXTWX = X.T @ W @ X\nXTWy = X.T @ W @ y\nbeta_gmm = np.linalg.inv(XTWX) @ XTWy\ny_hat_gmm = X @ beta_gmm\n\n# Plot with aspect ratio 1:1\nplt.figure(figsize=(8, 8))\nplt.scatter(x, y, color='lightgray', label='Observed data')\nplt.plot(x, y_hat_ols, label='OLS projection', color='blue', linewidth=2)\nplt.plot(x, y_hat_gmm, label='GMM projection (precision-weighted)', color='red', linestyle='--', linewidth=2)\nplt.title(\"OLS vs GMM Projection with Heteroskedastic Data\")\nplt.xlabel(\"x\")\nplt.ylabel(\"y\")\nplt.axis('equal')  # Set equal aspect ratio\nplt.legend()\nplt.grid(True)\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](regressions_files/figure-html/cell-2-output-1.png){}\n:::\n:::\n\n\n### objective function (quadratic form)의 level set\n\n참고: GMM의 목적함수는 원래부터 정규화(normalized)되어 있는 반면, OLS의 목적함수는 정규화 없이 나타나는 일반적 2차형식이므로, 두 방법을 엄밀히 비교하려면 OLS도 동일한 형태로 정규화해 주어야 함.\n\n| 방법 | 목적함수 형태 | 거리해석 | Level set 형태 |\n|------|----------------------|----------------------|----------------|\n| OLS (일반형) | $(y - X\\beta)^\\top (y - X\\beta)$ | Euclidean norm | 타원 (elliptical) |\n| OLS (정규화형) | $(\\beta - \\hat{\\beta})^\\top (X^\\top X)^{-1} (\\beta - \\hat{\\beta})$ | Mahalanobis norm | **구형 (spherical)** |\n| GMM | $\\bar{g}(\\theta)^\\top W \\bar{g}(\\theta)$ | Mahalanobis norm | 타원 또는 구형 |\n\n::: {#fda577e1 .cell execution_count=2}\n``` {.python .cell-code}\n# Z-score normalization of x to improve XtX condition\nfrom sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\nx_normalized = scaler.fit_transform(x.reshape(-1, 1)).flatten()\nX_normalized = np.vstack([np.ones(n), x_normalized]).T\n\n# Recalculate OLS and GMM using normalized X\nbeta_ols_norm = np.linalg.inv(X_normalized.T @ X_normalized) @ X_normalized.T @ y\ny_hat_ols_norm = X_normalized @ beta_ols_norm\n\n# GMM estimation with same W\nXTWX_norm = X_normalized.T @ W @ X_normalized\nXTWy_norm = X_normalized.T @ W @ y\nbeta_gmm_norm = np.linalg.inv(XTWX_norm) @ XTWy_norm\ny_hat_gmm_norm = X_normalized @ beta_gmm_norm\n\n# New grid around beta_ols_norm\nb0_vals = np.linspace(beta_ols_norm[0] - 1, beta_ols_norm[0] + 1, 100)\nb1_vals = np.linspace(beta_ols_norm[1] - 1, beta_ols_norm[1] + 1, 100)\nB0, B1 = np.meshgrid(b0_vals, b1_vals)\nB_flat = np.vstack([B0.ravel(), B1.ravel()])\n\n# Normalized OLS objective (Mahalanobis)\nXtX_inv_norm = np.linalg.inv(X_normalized.T @ X_normalized)\ndelta_norm = B_flat - beta_ols_norm[:, None]\nJ_ols_normalized = np.einsum('ji,jk,ki->i', delta_norm, XtX_inv_norm, delta_norm).reshape(B0.shape)\n\n# GMM objective with normalized X\nJ_gmm_norm = []\nfor i in range(B_flat.shape[1]):\n    r = y - X_normalized @ B_flat[:, i]\n    obj = r.T @ W @ r\n    J_gmm_norm.append(obj)\nJ_gmm_norm = np.array(J_gmm_norm).reshape(B0.shape)\n\n# Plotting\nfig, axs = plt.subplots(1, 2, figsize=(14, 6))\n\n# Normalized OLS (should be spherical)\ncs1 = axs[0].contour(B0, B1, J_ols_normalized, levels=20, cmap='Blues')\naxs[0].plot(beta_ols_norm[0], beta_ols_norm[1], 'bo', label='OLS solution')\naxs[0].set_title(\"OLS (Normalized X): Spherical Level Sets\")\naxs[0].set_xlabel(r\"$\\beta_0$\")\naxs[0].set_ylabel(r\"$\\beta_1$\")\naxs[0].axis('equal')\naxs[0].legend()\naxs[0].grid(True)\n\n# GMM with normalized X\ncs2 = axs[1].contour(B0, B1, J_gmm_norm, levels=20, cmap='Reds')\naxs[1].plot(beta_gmm_norm[0], beta_gmm_norm[1], 'ro', label='GMM solution')\naxs[1].set_title(\"GMM (Normalized X): Ellipsoidal Level Sets\")\naxs[1].set_xlabel(r\"$\\beta_0$\")\naxs[1].set_ylabel(r\"$\\beta_1$\")\naxs[1].axis('equal')\naxs[1].legend()\naxs[1].grid(True)\n\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](regressions_files/figure-html/cell-3-output-1.png){}\n:::\n:::\n\n\n",
    "supporting": [
      "regressions_files"
    ],
    "filters": [],
    "includes": {}
  }
}
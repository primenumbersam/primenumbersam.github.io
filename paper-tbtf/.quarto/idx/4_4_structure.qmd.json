{"title":"04 Structure","markdown":{"yaml":{"title":"04 Structure","format":{"html":{"code-fold":true}},"execute":{"enabled":false}},"headingText":"CRSP dataframe import","containsRefs":false,"markdown":"\n\nThis section decomposes the structural mechanisms underlying the TBTF strategy across two economic regimes—pre-2010 and post-2010. By comparing these periods, we identify changes in distributional composition, capital concentration, and rank mobility that reflect broader shifts in financial market dynamics following systemic interventions and structural innovation—each of which challenges conventional assumptions in asset pricing and market efficiency.\n\n```{python}\nimport numpy as np\nimport statsmodels.api as sm\nfrom scipy.stats import norm\nfrom sklearn.mixture import GaussianMixture\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport pandas as pd\nimport sqlite3\ncon = sqlite3.connect(database=\"../../tbtf.sqlite\")\n\ncrsp = pd.read_sql_query(\n  sql=\"SELECT * FROM crsp\",\n  con=con,\n  parse_dates={\"date\"}\n)\ncrsp.head()\n```\n\n\n## Mixture Distribution Decomposition\n\n### Core Question:\n> Is the market portfolio return better explained as a mixture of **distinct structural groups**, such as top decile vs. the rest, and how have their mixture weights changed across regimes?\n\n### Framework & Method:\n\n- We define two return-generating groups:\n  - **Group A**: Top 10% stocks by market cap (state = 10)\n  - **Group B**: All other listed stocks (states < 10)\n- At each month $t$, compute value-weighted returns:\n\n  $$\n  R_t^{\\text{market}} = w_t \\cdot R_t^{(10)} + (1 - w_t) \\cdot R_t^{(<10)}\n  $$\n\n  where $w_t$ is the capital share of Group A—i.e., the mixture weight.\n\n### Interpretation\n\nThe empirical results from the mixture decomposition provide compelling evidence of a **structural shift** in how market returns are generated and distributed. Unlike traditional interpretations that focus on regime switching (e.g., bull vs. bear), our analysis reveals a **persistent cross-sectional asymmetry**—notably between the **top decile** and the **remaining 90%** of firms by market capitalization.\n\n```{python}\n# df_mix\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# 1. Value-Weighted Return 계산 함수 정의\ndef value_weighted_return(df, value_col='mktcap_lag', return_col='ret'):\n    weighted = df[return_col] * df[value_col]\n    total_weight = df[value_col].sum()\n    return weighted.sum() / total_weight if total_weight > 0 else np.nan\n\n# 2. Group별 수익률 계산 및 mixture 분해\n# 결과 저장용 리스트\nresults = []\n\n# 월별 반복\nfor date, group in crsp.groupby('date'):\n    top_group = group[group['state'] == 10]\n    rest_group = group[(group['state'] < 10) & (group['state'] > 0)]\n\n    if len(top_group) == 0 or len(rest_group) == 0:\n        continue\n\n    # 개별 그룹의 value-weighted return 계산\n    r_top = value_weighted_return(top_group)\n    r_rest = value_weighted_return(rest_group)\n    \n    # 전체 시장 포트폴리오 value-weighted return 계산\n    r_total = value_weighted_return(group[group['state'] > 0])\n\n    # mixture weight (자본 비중)\n    w_top = top_group['mktcap_lag'].sum() / group[group['state'] > 0]['mktcap_lag'].sum()\n\n    results.append({\n        'date': date,\n        'r_top': r_top,\n        'r_rest': r_rest,\n        'r_total': r_total,\n        'w_top': w_top,\n        'w_rest': 1 - w_top,\n        'r_predicted': w_top * r_top + (1 - w_top) * r_rest\n    })\n\ndf_mix = pd.DataFrame(results).sort_values('date')\n\ndf_mix.head()\n```\n\n#### Capital Lock-In and Mixture Weight Dynamics\n\n```{python}\n# Time-series Capital Weight of Top 10% (State = 10)\nplt.plot(df_mix['date'], df_mix['w_top'])\nplt.title('Time-series Capital Weight of Top 10% (State = 10)')\nplt.xlabel('Date')\nplt.ylabel('Top 10% Capital Weight')\nplt.show()\n\n```\n\nThe time-series evolution of $w_t$—the **value-weighted capital share of the top 10% stocks**—offers compelling evidence of persistent and intensifying capital lock-in.\n\n- Between **1996 and 2001**, $w_t$ rose **rapidly** from below 0.75 to a peak of approximately **0.88**, reflecting the early stages of mega-cap dominance during the dot-com boom.\n- After peaking, it **declined gradually**, reaching just below **0.80** by 2006, indicating a temporary rebalancing of capital across ranks.\n- From **2006 to 2009**, $w_t$ climbed again, stabilizing around **0.83** during the financial crisis—a period marked by concentrated flight to safety and the early impact of Federal Reserve interventions.\n- A modest decline occurred post-crisis, with $w_t$ dipping to around **0.78** in 2011.\n- Since then, however, the capital share of the top 10% has exhibited **near-monotonic increases with remarkably low volatility**, except for a brief interruption during the **COVID-19 shock in 2020**.\n- By the end of 2023, $w_t$ had reached levels exceeding **0.85**, with **persistent upward momentum and minimal fluctuations**.\n\nThis structural pattern indicates not merely high concentration but **capital inertia**—a state where **capital ceases to reallocate dynamically** and instead becomes entrenched within a quasi-permanent elite. Capital flows no longer reflect dynamic responses to fundamentals or risk signals, but instead conform to **structural entrenchment** supported by indexation, ETF flows, and policy-driven yield compression. Capital lock-in is not only persistent but **self-reinforcing**, reflecting a transition from competitive allocation to **institutionalized dominance**.\n\nc.f. Compared to Fama-French’s traditional use of **NYSE-only breakpoints**, our percentile-based method—spanning **NYSE + Nasdaq + AMEX**—captures the **true cross-sectional concentration of market power**, including modern platform firms (e.g., AAPL, MSFT, NVDA) that disproportionately shape returns in the post-crisis era.\n\n\n#### Unconditional Return Distributions: Top vs. Rest\n```{python}\n# Unconditional Return Distribution: Actual vs. Estimated Mixture\n# GMM의 간소화 버전\" 또는 \"semi-parametric mixture modeling\n\n# 샘플 수\nobs = len(df_mix)\n\n# 각 그룹의 수익률 평균 및 표준편차\nr_top_mean = df_mix['r_top'].mean()\nr_top_std = df_mix['r_top'].std()\nr_rest_mean = df_mix['r_rest'].mean()\nr_rest_std = df_mix['r_rest'].std()\nw_top_mean = df_mix['w_top'].mean()\n\n# 실제 및 mixture 수익률\nr_total = df_mix['r_total']\nr_predicted = df_mix['r_predicted']\n\n# 히스토그램과 PDF x축 범위\nxmin = min(r_total.min(), r_predicted.min())\nxmax = max(r_total.max(), r_predicted.max())\nx = np.linspace(xmin, xmax, 1000)\n\n# PDF 계산\npdf_top = norm.pdf(x, loc=r_top_mean, scale=r_top_std)\npdf_rest = norm.pdf(x, loc=r_rest_mean, scale=r_rest_std)\npdf_mix = w_top_mean * pdf_top + (1 - w_top_mean) * pdf_rest\n\n# Plot\nplt.figure(figsize=(10, 6))\nbins = np.linspace(xmin, xmax, 50)\n\n# 실제 수익률 히스토그램\nplt.hist(r_total, bins=bins, alpha=0.3, label='Actual Total Return', color='steelblue', density=True)\n\n# 각 컴포넌트 PDF\nplt.plot(x, pdf_top, linestyle='-', color='red', label='Top 10% Estimated PDF')\nplt.plot(x, pdf_rest, linestyle='-', color='blue', label='Bottom 90% Estimated PDF')\n\n# 혼합 정규 분포 PDF\nplt.plot(x, pdf_mix, linestyle='--', color='black', linewidth=2, label='Mixture PDF (Estimated)')\n\nplt.title(\"Unconditional Return Distribution: Actual vs. Estimated Mixture\")\nplt.xlabel(\"Monthly Return\")\nplt.ylabel(\"Density\")\nplt.legend()\nplt.grid(True)\nplt.tight_layout()\nplt.show()\n\n```\n\n```{python}\n# Unconditional Return Distribution by Period and Capital Rank Group\n\n# 요약 통계 (Pre-2010 vs Post-2010 비교 등)\ndf_mix['period'] = np.where(df_mix['date'] < '2010-01-01', 'Pre-2010', 'Post-2010')\n\n# 데이터 재구조화: long format\ndf_long = pd.melt(\n    df_mix,\n    id_vars=['date', 'period'],\n    value_vars=['r_top', 'r_rest'],\n    var_name='Group',\n    value_name='Monthly Return'\n)\n\n# Group 이름 정리\ndf_long['Group'] = df_long['Group'].replace({\n    'r_top': 'Top 10%',\n    'r_rest': 'Bottom 90%'\n})\n\n# Boxplot\nplt.figure(figsize=(10, 6))\nsns.boxplot(\n    data=df_long,\n    x='period',\n    y='Monthly Return',\n    hue='Group',\n    palette='Set2'\n)\nplt.title('Unconditional Return Distribution by Period and Capital Rank Group')\nplt.axhline(0, color='gray', linestyle='--', linewidth=1)\nplt.ylabel('Monthly Return')\nplt.xlabel('Period')\nplt.legend(title='Group', loc='lower left')\nplt.tight_layout()\nplt.show()\n\n```\n\n- **Boxplot visualizations** reveal that in the post-2010 regime:\n  - The top decile (`r_top`) has **higher median returns** and a **narrower interquartile range** than the bottom 90% (`r_rest`).\n  - **Outliers on the downside virtually disappear** for `r_top`, while they persist—especially on both tails—for `r_rest`.\n  - The return distribution of `r_top` becomes increasingly **compact, upward-shifted, and volatility-suppressed**, resembling **a managed financial product** rather than a random equity basket.\n- These patterns imply that **risk-adjusted return asymmetry** is not just about mean differences, but about **structural volatility suppression** and downside risk elimination at the top.\n\n#### Gaussian Mixture Results: Two-Component Fit\n```{python}\n# GMM (k=2) for Top 10% and for Remining 90% \nimport os\nos.environ['LOKY_MAX_CPU_COUNT'] = '4'  # 사용하려는 코어 수를 직접 지정\n\n# 각 그룹의 return 시리즈\ntop_returns = df_mix['r_top'].dropna().values.reshape(-1, 1)\nrest_returns = df_mix['r_rest'].dropna().values.reshape(-1, 1)\n\n# GMM 적합 함수\ndef fit_gmm(data, n_components=2):\n    gmm = GaussianMixture(n_components=n_components, random_state=42)\n    gmm.fit(data)\n    return gmm\n\ngmm_top = fit_gmm(top_returns, n_components=2)\ngmm_rest = fit_gmm(rest_returns, n_components=2)\n\ndef print_gmm_summary(gmm, label):\n    print(f\"\\nGMM summary for {label}\")\n    for i, (w, mu, var) in enumerate(zip(gmm.weights_, gmm.means_, gmm.covariances_)):\n        print(f\" Component {i+1}: weight={w:.3f}, mean={mu[0]:.4f}, std={np.sqrt(var[0][0]):.4f}\")\n\nprint_gmm_summary(gmm_top, 'Top 10%')\nprint_gmm_summary(gmm_rest, 'Remaining 90%')\n```\n\nThe Gaussian Mixture Models (GMMs) estimated separately on `r_top` and `r_rest` uncover two key structural regimes:\n\n- Both groups exhibit **bimodal structure**, with one cluster capturing **low-mean, high-volatility returns**, and the other **positive-mean, low-volatility returns**.\n- However, for the **top decile**, the low-return regime has a **lower weight and tighter variance**, suggesting that even when shocks occur, they are **attenuated** within this elite group.\n- In contrast, the bottom 90% remains exposed to **broader volatility regimes**, maintaining a larger spread of possible outcomes.\n\n#### Testing Internal Heterogeneity in Top Decile\n```{python}\n# k Selection by AIC vs. BIC\n\nX = df_mix['r_top'].dropna().values.reshape(-1, 1)\n\naic_scores = []\nbic_scores = []\nks = range(1, 21)\n\nfor k in ks:\n    gmm = GaussianMixture(n_components=k, random_state=42)\n    gmm.fit(X)\n    aic_scores.append(gmm.aic(X))\n    bic_scores.append(gmm.bic(X))\n\n# Plot AIC vs BIC to visualize optimal k\nplt.plot(ks, aic_scores, label='AIC')\nplt.plot(ks, bic_scores, label='BIC')\nplt.xlabel('Number of Components (k)')\nplt.ylabel('Information Criterion')\nplt.legend()\nplt.title('Model Selection: AIC vs BIC')\nplt.grid(True)\nplt.show()\n\n```\n\nTo test whether the top decile itself contains further latent substructures, we estimate GMMs with increasing number of components ($k = 1, 2, ..., 20$). The result is striking:\n\n- Both AIC and BIC **increase monotonically** in $k$, indicating that **no additional latent components** significantly improve model fit.\n- The most parsimonious and interpretable solution is obtained at **$k = 2$ or even $k = 1$**, reinforcing the view that **a single dominant structural cluster** governs return generation at the top.\n\nThis suggests that return asymmetry may not stem from overlapping regimes or transitory factors, but rather from the structural dominance of a statistically persistent subgroup of mega-cap firms.\n\n### Summary Interpretation\n\nTogether, these results imply that:\n\n- The **top-decile portfolio behaves like a capital sink**—absorbing flows while insulating itself from market volatility.\n- **Market return is no longer the outcome of dispersed competition**, but rather **converges to a structurally locked elite**, supported by policy, passive flows, and indexation mechanics.\n- This undermines the classical view of a dynamic, risk-compensated market and instead points toward **structural rent extraction** by the few.\n\n\n## Capital Share Convexity: Quadratic Regression Evolution\n\n### Core Question:\n> Has capital become more concentrated in the top-ranked firms over time?\n\n### Framework & Method:\n- Cross-sectional regression at each $t$:\n\n  $$\n  \\text{CapShare}_{i,t} = \\alpha_t + \\beta_t \\cdot \\text{Rank}_i + \\gamma_t \\cdot \\text{Rank}_i^2 + \\varepsilon_{i,t}\n  $$\n\n  where $\\text{Rank}_i$ is percentile-based with state 1 = bottom 10%, ..., state 10 = top 10%.\n\n- The convexity of capital distribution is captured by $\\gamma_t$:\n  - $\\gamma_t > 0$ implies **increasing convexity**, or accelerated capital share at the top.\n\n- Time-series $\\{\\gamma_t\\}$ is visualized to show evolution of capital inequality.\n\n### Interpretation\n\n```{python}\n# Time-Series of Capital Share Convexity\n\n# 1. 각 날짜별로 state별 mktcap 합산 → CapShare_i 생성\ndef compute_capshare(df):\n    df = df.copy()\n    cap_by_state = df.groupby('state')['mktcap'].sum()\n    total_cap = cap_by_state.sum()\n    df['cap_share'] = df['state'].map(cap_by_state / total_cap)\n    return df\n\n# 2. cross-sectional regression에서 사용될 state별 요약 데이터 생성\ndef compute_quadratic_coefficients(df):\n    results = []\n    for date, group in df.groupby('date'):\n        # 유효한 state만 사용 (state 0은 제외)\n        group = group[group['state'] > 0].copy()\n        cap_by_state = group.groupby('state')['mktcap'].sum()\n        total_cap = cap_by_state.sum()\n        capshare = cap_by_state / total_cap\n\n        # x = state (1~10), y = capshare\n        x = capshare.index.values\n        y = capshare.values\n\n        X = np.column_stack([x, x**2])\n        X = sm.add_constant(X)\n        model = sm.OLS(y, X).fit()\n\n        results.append({\n            'date': date,\n            'alpha': model.params[0],\n            'beta': model.params[1],\n            'gamma': model.params[2],\n            'r_squared': model.rsquared\n        })\n\n    return pd.DataFrame(results)\n\n\ndef plot_gamma_time_series(gamma_df):\n    plt.figure(figsize=(12, 6))\n    plt.plot(gamma_df['date'], gamma_df['gamma'], label='Gamma (Quadratic Term)', color='darkred')\n\n    # 기준선들\n    plt.axhline(0, color='gray', linestyle='--', linewidth=1)\n    plt.axvline(pd.to_datetime(\"2010-01-01\"), color='black', linestyle='--', linewidth=1.2, label='2010 Breakpoint')\n    plt.title('Time-Series of Capital Share Convexity (γₜ)')\n    plt.xlabel('Date')\n    plt.ylabel('Gamma Coefficient (Convexity)')\n    plt.legend()\n    plt.grid(True)\n    plt.tight_layout()\n    plt.show()\n\ncrsp_filtered = crsp[crsp['state'] > 0].copy()\n\ngamma_df = compute_quadratic_coefficients(crsp_filtered)\n\nplot_gamma_time_series(gamma_df)\n```\nThe time-series of the capital share convexity coefficient, $\\gamma_t$, estimated via cross-sectional quadratic regressions, reveals a striking and persistent structure.\n\n```{python}\ngamma_df.drop('date', axis=1).describe()\n```\n\nAcross the full sample period (1996–2023), $\\gamma_t$ remains **consistently positive and tightly bounded**, with:\n\n- A mean value of approximately **0.0186**,  \n- A narrow interquartile range: [0.0181, 0.0192],  \n- A low standard deviation of **0.0007**, and  \n- R-squared values averaging **0.67**, indicating robust fit quality across time.\n\nThis **remarkable temporal consistency** suggests that the top ranks in the market-cap distribution have maintained a **structurally convex advantage**—absorbing disproportionately higher capital relative to their rank in nearly every month over the past three decades.\n\nA closer examination shows that:\n\n- Prior to 2010, there was **mild downward drift** in $\\gamma_t$, consistent with episodic rebalancing and potential capital redistribution (e.g., during the post-dotcom or pre-GFC phase).\n- However, **post-2010**, $\\gamma_t$ exhibits a **slight but stable upward trend**, indicating **reinforced convexity**—a steeper capital concentration curve among the top-ranked firms.\n\nThis empirical curvature echoes the shape of a **discrete Lorenz curve**, where $\\gamma_t$ can be interpreted as a **\"capital inequality curvature index\"**. In this framework, increases in $\\gamma_t$ correspond to a **more extreme dominance of top ranks**, consistent with both the **capital lock-in** and **transition persistence** mechanisms documented elsewhere in this study.\n\nImportantly, the tight dispersion and monotonic stabilization of $\\gamma_t$ provide indirect but compelling support for the **out-of-sample consistency** of capital-weight-based strategies. The fact that the quadratic relationship between rank and capshare is not only convex but also time-invariant implies that **a convex weighting scheme calibrated in-sample may remain optimal (or near-optimal) out-of-sample**.\n\nThis further reinforces the central hypothesis of the TBTF framework: **top capital positions are not merely episodic outcomes but persistent structural anchors** in modern financial markets.\n\n\n## Persistence and Lock-In Dynamics\n\n좋습니다. 아래는 `4_4_structure.qmd`의 *\"Persistence and Lock-In Dynamics\"* 섹션 중, **Markov transition matrix 추정 방식**을 실제 구현된 10×10 matrix 기반으로 **수정 및 보완**한 내용입니다. 핵심은 다음 두 가지입니다:\n\n1. 원래 open system에서 `state = 0`(탈락 또는 미관측 상태)을 포함한 11×11 matrix는 **완전히 닫힌 체계(closed system)**가 아님\n2. 본 분석은 실용적 접근으로 `state = 1–10` 범위에만 집중한 **pseudo-closed system**으로 제한하고, 이에 따른 해석상의 제약은 *추후 확장 연구*로 남긴다는 코멘트를 명시\n\n---\n\n## Persistence and Lock-In Dynamics\n\n### Core Question:\n> Is capital mobility declining, with firms increasingly **locked in** to top positions?\n\n### Framework & Method\n\n- **States** are defined as decile ranks of market capitalization:\n  - **State 10**: Top 10% (≥ 90th percentile)\n  - **States 6–9**: Upper middle 40% (50–90 percentile)\n  - **States 1–5**: Bottom 50%\n  - **State 0**: Delisted or unranked (excluded from main estimation)\n\n- Using CRSP panel data, we construct an empirical first-order Markov transition matrix:\n\n  $$\n  P_{ij} = \\Pr(\\text{state}_{t+1} = j \\mid \\text{state}_t = i)\n  $$\n\n- **Important Adjustment**:\n  - The original system includes **state 0**, representing delisting or unranked stocks.\n  - However, to focus on the relative dynamics of ranked firms and avoid structural imbalance caused by market entry/exit, we restrict the analysis to **states 1–10**, forming a **pseudo-closed system**.\n  - This restriction implicitly conditions on survival and omits net capital flow into or out of the system.\n  - A more comprehensive treatment including open-system dynamics (e.g., absorbing states, boundary flows) is deferred to future work.\n\n- We estimate:\n  - The 10×10 transition matrix $P_{ij}$ among ranked states only.\n  - **Diagonal elements** ($P_{ii}$): Represent state persistence or **retention probability**.\n  - **Off-diagonal elements**: Capture **mobility dynamics**, including upward or downward shifts.\n  - The **stationary distribution** $\\pi$ is computed via eigen decomposition:\n  \n    $$\n    \\pi' P = \\pi', \\quad \\sum_i \\pi_i = 1\n    $$\n\n- All transition counts are computed from actual firm-level changes in decile state based on monthly data, pre-processed to include both listing and delisting effects via augmented panel construction (`crsp_trunc`).\n\n\n### Interpretation\n\n```{python}\nimport sys\nimport os\n# 현재 경로 기준으로 상위 디렉토리로 경로 추가\nsys.path.append(os.path.abspath('../..'))\n\nimport tbtf_data\n\nff3 = tbtf_data.load_ff3_factors(start_date=crsp['date'].min(), end_date=crsp['date'].max())\ncrsp_trunc = tbtf_data.crsp_truncation(crsp,ff3)\n# crsp_full = tbtf_data.crsp_lifecycle(crsp_trunc)\n```\n\n```{python}\n# ================================================\n# transition_matrix : pd.DataFrame (10x10)\n# stationary_series : pd.Series (length 10)\n# ================================================\n\n# old-living만 선택 (full lifecycle이 없거나 right-truncated)\n#crsp_valid = crsp_full[crsp_full['lifetype'] == 'old-living'].copy()\n\n#print(\"The number of stocks from state 0 to any states:\", (crsp_trunc['state_lag'] == 0).sum())\n#print(\"The number of stocks from any states to state 0:\", (crsp_trunc['state'] == 0).sum())\n#print(\"The number of Total In-flow stocks during the sample period:\", (crsp_trunc['state_lag'] == 0).sum()-(crsp_trunc['state'] == 0).sum())\n\n# Transition matrix 계산 시점에서 filtering\n# 조건: state_lag ∈ [1, 10] AND state ∈ [1, 10]\ncrsp_valid = crsp_trunc.query(\"state > 0 and state_lag > 0\").copy()\n\n# Compute empirical transition counts\n# (state_lag → state) pair frequency table\ntransition_counts = (\n    crsp_valid\n    .groupby(['state_lag', 'state'])\n    .size()\n    .unstack(fill_value=0)\n    .sort_index()\n    .reindex(columns=range(1, 11), fill_value=0)  # Ensure all states 0 to 10 are present\n)\n\n# Convert counts to row-wise probabilities\n# Each row represents conditional distribution: P(next state | current state)\ntransition_matrix = transition_counts.div(transition_counts.sum(axis=1), axis=0)\n\n# Compute stationary distribution (long-run equilibrium distribution over states)\n# Method: Use eigen-decomposition of the transpose of the transition matrix\neigvals, eigvecs = np.linalg.eig(transition_matrix.T.values)\nstationary = np.real(eigvecs[:, np.isclose(eigvals, 1)])\n\n# Normalize to sum to 1\nstationary = stationary[:, 0]\nstationary_dist = stationary / stationary.sum()\n\n# Format for output\ntransition_matrix.index.name = 'From State'\ntransition_matrix.columns.name = 'To State'\n\nstationary_series = pd.Series(stationary_dist, index=transition_matrix.columns, name='Stationary Dist.')\n\n# Markov Transition Matrix Heatmap (States 0–10)\nimport seaborn as sns\n\nplt.figure(figsize=(10, 8))\nsns.heatmap(\n    transition_matrix,\n    annot=True,\n    fmt=\".3f\",\n    cmap=\"YlGnBu\",\n    linewidths=0.5,\n    cbar_kws={'label': 'Transition Probability'},\n    xticklabels=[f\"To {i}\" for i in transition_matrix.columns],\n    yticklabels=[f\"From {i}\" for i in transition_matrix.index]\n)\nplt.title(\"Markov Transition Matrix Heatmap (States 0–10)\")\nplt.xlabel(\"Next Period State\")\nplt.ylabel(\"Current Period State\")\nplt.tight_layout()\nplt.show()\n\n```\n\n\n```{python}\n# Long-Run Stationary Distribution by State (Excl. Exit)\n\n# Step 4: Compute stationary distribution\n# Method: Use eigen decomposition for the transpose of the transition matrix\neigvals, eigvecs = np.linalg.eig(transition_matrix.T.values)\nstationary = np.real(eigvecs[:, np.isclose(eigvals, 1)])\nstationary = stationary[:, 0]\nstationary_dist = stationary / stationary.sum()\n\n# Prepare final transition matrix and stationary distribution\ntransition_matrix.index.name = 'From State'\ntransition_matrix.columns.name = 'To State'\nstationary_series = pd.Series(stationary_dist, index=transition_matrix.columns, name=\"Stationary Dist.\")\n\n# State 1부터 10까지의 stationary probability\nstationary_series_nonzero = stationary_series.iloc[:]\n\n# Plot\nplt.figure(figsize=(8, 5))\nsns.barplot(\n    x=stationary_series_nonzero.index.astype(str),\n    y=stationary_series_nonzero.values,\n    color='steelblue',\n    edgecolor='black'\n)\n\n# Annotate each bar with its value\nfor i, val in enumerate(stationary_series_nonzero.values):\n    plt.text(i, val + 0.001, f\"{val:.3f}\", ha='center', va='bottom', fontsize=10)\n\n# Plot labels and formatting\nplt.title(\"Long-Run Stationary Distribution by State (Excl. Exit)\", fontsize=14)\nplt.xlabel(\"State (Market Cap Rank)\", fontsize=12)\nplt.ylabel(\"Stationary Probability\", fontsize=12)\nplt.xticks(rotation=0)\nplt.ylim(0, stationary_series_nonzero.max() + 0.01)\nplt.tight_layout()\nplt.show()\n\n```\n\nThe estimated **Markov transition matrix** and **stationary distribution**, constructed using only ranked states (States 1–10), reveal a structurally persistent yet more symmetric capital mobility structure than previously observed in open-system models that included State 0. By excluding delisted or unranked firms, this framework focuses on rank-to-rank transitions within the surviving universe of firms and captures a distinct form of intra-market hierarchy.\n\n**High Persistence at the Extremes**\n\nThe system continues to exhibit strong persistence at both ends of the distribution. In particular, the top decile (State 10) shows a self-transition probability of 0.972, implying an expected duration of over 36 months. This persistence confirms that once firms enter the top decile, they tend to remain there, reinforcing the notion that the highest tier functions as a quasi-absorbing state. \n\nSimilarly, the bottom decile (State 1) displays a self-transition probability of 0.931, also associated with prolonged durations. This bilateral persistence at the extremes suggests a structural form of capital stratification, where firms, once classified into the highest or lowest decile, tend to stay put. These two tails behave like boundary layers of the rank system, characterized by entrenchment rather than fluid mobility.\n\n**Mobility in the Middle**\n\nIn contrast, the middle states—especially States 4 and 5—display the lowest persistence, each with a diagonal transition probability near 0.79. These intermediate ranks represent the most unstable region of the system, acting as a transitory buffer between the stable top and bottom groups. Firms in these states face greater uncertainty and classification volatility, neither entrenched like the top-tier incumbents nor consistently relegated like small-cap firms. \n\nThis suggests that mid-cap firms are most exposed to competitive reshuffling. Their trajectories remain open-ended, with material probabilities of upward or downward movement depending on performance shocks or relative repricing, but with limited protection from persistent identity.\n\n**Absence of Exit/Entry Mechanisms**\n\nIn this formulation, the Markov chain excludes transitions into or out of State 0. As such, delisting and new entries are not explicitly modeled. This simplification defines a pseudo-closed system designed to examine intra-system mobility rather than open-market turnover. The exclusion of exit risk makes the estimated transition probabilities purely conditional on being within the ranked universe, ideal for studying relative capital stickiness but less suited for estimating attrition or survivorship.\n\nThis design choice removes the asymmetry introduced by non-reversible states such as delisting or IPO-based entry, which would otherwise distort the symmetry of the estimated chain. While this comes at the cost of completeness, it offers clarity in isolating the structural dynamics of persistence, volatility, and mobility within the active market.\n\n**Stationary Distribution: Skewed Toward Lower Deciles**\n\nThe estimated stationary distribution across ranked states displays a gradual but consistent decline from lower to higher ranks. State 1 exhibits the highest long-run probability, at approximately 16 percent, while State 10 stabilizes at around 8 percent. This pattern suggests that lower-ranked firms are more prevalent in the long run, at least in terms of count, even though they may not dominate capital or influence.\n\nTwo forces likely drive this skew: first, a disproportionately high entry frequency into the lower deciles, often from new listings or small restructurings; and second, a limited degree of upward mobility from these initial positions. The bottom deciles, while not formally absorbing, act as a sticky floor—consistently replenished by inflows yet rarely exited by transitions to higher states.\n\nThe implication is that mobility across ranks is asymmetric even within the active market. Structural regeneration happens predominantly at the bottom, while upward reallocation remains limited. This reinforces the interpretation of the capital market not as a fluid mobility engine, but as a system with hierarchical layers, each marked by different persistence dynamics and long-run outcomes.\n\n\n## Summary Table\n\n| Structural Channel | Mechanism                             | Interpretation                                                 |\n|--------------------|---------------------------------------|----------------------------------------------------------------|\n| Mixture            | Return as weighted sum of 2 subgroups | Top decile increasingly **drives aggregate performance**       |\n| Convexity          | Capital share as function of rank     | **Lorenz-type concentration** intensifies over time            |\n| Transition         | Markov dynamics of rank-state mobility| Top and Exit states are **quasi-absorbing**, path-dependent    |\n\n- **Top-decile persistence** reveals a form of **quasi-absorption**, where firms not only rise to the top but stay there disproportionately longer — effectively becoming \"**Too Big to Exit**.\"\n- **Middle-rank volatility** suggests **structural fragility**, with firms unable to stabilize or ascend — reflecting a \"**Fragile Middle**\" that lacks lasting competitive foothold.\n- **Lower-rank saturation** reflects **systemic bottlenecks**, where inflows into low deciles are not matched by upward mobility — indicating a \"**sticky floor**\" rather than an active ladder.\n- The **long-run distribution** reinforces this structure: capital is **not symmetrically mobile**, but increasingly trapped in persistent states. This challenges foundational assumptions in representative-agent models, suggesting instead that capital flows in financial markets obey a **hierarchical and inertial logic**, not a fluid or ergodic one.","srcMarkdownNoYaml":"\n\nThis section decomposes the structural mechanisms underlying the TBTF strategy across two economic regimes—pre-2010 and post-2010. By comparing these periods, we identify changes in distributional composition, capital concentration, and rank mobility that reflect broader shifts in financial market dynamics following systemic interventions and structural innovation—each of which challenges conventional assumptions in asset pricing and market efficiency.\n\n```{python}\nimport numpy as np\nimport statsmodels.api as sm\nfrom scipy.stats import norm\nfrom sklearn.mixture import GaussianMixture\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# CRSP dataframe import\nimport pandas as pd\nimport sqlite3\ncon = sqlite3.connect(database=\"../../tbtf.sqlite\")\n\ncrsp = pd.read_sql_query(\n  sql=\"SELECT * FROM crsp\",\n  con=con,\n  parse_dates={\"date\"}\n)\ncrsp.head()\n```\n\n\n## Mixture Distribution Decomposition\n\n### Core Question:\n> Is the market portfolio return better explained as a mixture of **distinct structural groups**, such as top decile vs. the rest, and how have their mixture weights changed across regimes?\n\n### Framework & Method:\n\n- We define two return-generating groups:\n  - **Group A**: Top 10% stocks by market cap (state = 10)\n  - **Group B**: All other listed stocks (states < 10)\n- At each month $t$, compute value-weighted returns:\n\n  $$\n  R_t^{\\text{market}} = w_t \\cdot R_t^{(10)} + (1 - w_t) \\cdot R_t^{(<10)}\n  $$\n\n  where $w_t$ is the capital share of Group A—i.e., the mixture weight.\n\n### Interpretation\n\nThe empirical results from the mixture decomposition provide compelling evidence of a **structural shift** in how market returns are generated and distributed. Unlike traditional interpretations that focus on regime switching (e.g., bull vs. bear), our analysis reveals a **persistent cross-sectional asymmetry**—notably between the **top decile** and the **remaining 90%** of firms by market capitalization.\n\n```{python}\n# df_mix\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# 1. Value-Weighted Return 계산 함수 정의\ndef value_weighted_return(df, value_col='mktcap_lag', return_col='ret'):\n    weighted = df[return_col] * df[value_col]\n    total_weight = df[value_col].sum()\n    return weighted.sum() / total_weight if total_weight > 0 else np.nan\n\n# 2. Group별 수익률 계산 및 mixture 분해\n# 결과 저장용 리스트\nresults = []\n\n# 월별 반복\nfor date, group in crsp.groupby('date'):\n    top_group = group[group['state'] == 10]\n    rest_group = group[(group['state'] < 10) & (group['state'] > 0)]\n\n    if len(top_group) == 0 or len(rest_group) == 0:\n        continue\n\n    # 개별 그룹의 value-weighted return 계산\n    r_top = value_weighted_return(top_group)\n    r_rest = value_weighted_return(rest_group)\n    \n    # 전체 시장 포트폴리오 value-weighted return 계산\n    r_total = value_weighted_return(group[group['state'] > 0])\n\n    # mixture weight (자본 비중)\n    w_top = top_group['mktcap_lag'].sum() / group[group['state'] > 0]['mktcap_lag'].sum()\n\n    results.append({\n        'date': date,\n        'r_top': r_top,\n        'r_rest': r_rest,\n        'r_total': r_total,\n        'w_top': w_top,\n        'w_rest': 1 - w_top,\n        'r_predicted': w_top * r_top + (1 - w_top) * r_rest\n    })\n\ndf_mix = pd.DataFrame(results).sort_values('date')\n\ndf_mix.head()\n```\n\n#### Capital Lock-In and Mixture Weight Dynamics\n\n```{python}\n# Time-series Capital Weight of Top 10% (State = 10)\nplt.plot(df_mix['date'], df_mix['w_top'])\nplt.title('Time-series Capital Weight of Top 10% (State = 10)')\nplt.xlabel('Date')\nplt.ylabel('Top 10% Capital Weight')\nplt.show()\n\n```\n\nThe time-series evolution of $w_t$—the **value-weighted capital share of the top 10% stocks**—offers compelling evidence of persistent and intensifying capital lock-in.\n\n- Between **1996 and 2001**, $w_t$ rose **rapidly** from below 0.75 to a peak of approximately **0.88**, reflecting the early stages of mega-cap dominance during the dot-com boom.\n- After peaking, it **declined gradually**, reaching just below **0.80** by 2006, indicating a temporary rebalancing of capital across ranks.\n- From **2006 to 2009**, $w_t$ climbed again, stabilizing around **0.83** during the financial crisis—a period marked by concentrated flight to safety and the early impact of Federal Reserve interventions.\n- A modest decline occurred post-crisis, with $w_t$ dipping to around **0.78** in 2011.\n- Since then, however, the capital share of the top 10% has exhibited **near-monotonic increases with remarkably low volatility**, except for a brief interruption during the **COVID-19 shock in 2020**.\n- By the end of 2023, $w_t$ had reached levels exceeding **0.85**, with **persistent upward momentum and minimal fluctuations**.\n\nThis structural pattern indicates not merely high concentration but **capital inertia**—a state where **capital ceases to reallocate dynamically** and instead becomes entrenched within a quasi-permanent elite. Capital flows no longer reflect dynamic responses to fundamentals or risk signals, but instead conform to **structural entrenchment** supported by indexation, ETF flows, and policy-driven yield compression. Capital lock-in is not only persistent but **self-reinforcing**, reflecting a transition from competitive allocation to **institutionalized dominance**.\n\nc.f. Compared to Fama-French’s traditional use of **NYSE-only breakpoints**, our percentile-based method—spanning **NYSE + Nasdaq + AMEX**—captures the **true cross-sectional concentration of market power**, including modern platform firms (e.g., AAPL, MSFT, NVDA) that disproportionately shape returns in the post-crisis era.\n\n\n#### Unconditional Return Distributions: Top vs. Rest\n```{python}\n# Unconditional Return Distribution: Actual vs. Estimated Mixture\n# GMM의 간소화 버전\" 또는 \"semi-parametric mixture modeling\n\n# 샘플 수\nobs = len(df_mix)\n\n# 각 그룹의 수익률 평균 및 표준편차\nr_top_mean = df_mix['r_top'].mean()\nr_top_std = df_mix['r_top'].std()\nr_rest_mean = df_mix['r_rest'].mean()\nr_rest_std = df_mix['r_rest'].std()\nw_top_mean = df_mix['w_top'].mean()\n\n# 실제 및 mixture 수익률\nr_total = df_mix['r_total']\nr_predicted = df_mix['r_predicted']\n\n# 히스토그램과 PDF x축 범위\nxmin = min(r_total.min(), r_predicted.min())\nxmax = max(r_total.max(), r_predicted.max())\nx = np.linspace(xmin, xmax, 1000)\n\n# PDF 계산\npdf_top = norm.pdf(x, loc=r_top_mean, scale=r_top_std)\npdf_rest = norm.pdf(x, loc=r_rest_mean, scale=r_rest_std)\npdf_mix = w_top_mean * pdf_top + (1 - w_top_mean) * pdf_rest\n\n# Plot\nplt.figure(figsize=(10, 6))\nbins = np.linspace(xmin, xmax, 50)\n\n# 실제 수익률 히스토그램\nplt.hist(r_total, bins=bins, alpha=0.3, label='Actual Total Return', color='steelblue', density=True)\n\n# 각 컴포넌트 PDF\nplt.plot(x, pdf_top, linestyle='-', color='red', label='Top 10% Estimated PDF')\nplt.plot(x, pdf_rest, linestyle='-', color='blue', label='Bottom 90% Estimated PDF')\n\n# 혼합 정규 분포 PDF\nplt.plot(x, pdf_mix, linestyle='--', color='black', linewidth=2, label='Mixture PDF (Estimated)')\n\nplt.title(\"Unconditional Return Distribution: Actual vs. Estimated Mixture\")\nplt.xlabel(\"Monthly Return\")\nplt.ylabel(\"Density\")\nplt.legend()\nplt.grid(True)\nplt.tight_layout()\nplt.show()\n\n```\n\n```{python}\n# Unconditional Return Distribution by Period and Capital Rank Group\n\n# 요약 통계 (Pre-2010 vs Post-2010 비교 등)\ndf_mix['period'] = np.where(df_mix['date'] < '2010-01-01', 'Pre-2010', 'Post-2010')\n\n# 데이터 재구조화: long format\ndf_long = pd.melt(\n    df_mix,\n    id_vars=['date', 'period'],\n    value_vars=['r_top', 'r_rest'],\n    var_name='Group',\n    value_name='Monthly Return'\n)\n\n# Group 이름 정리\ndf_long['Group'] = df_long['Group'].replace({\n    'r_top': 'Top 10%',\n    'r_rest': 'Bottom 90%'\n})\n\n# Boxplot\nplt.figure(figsize=(10, 6))\nsns.boxplot(\n    data=df_long,\n    x='period',\n    y='Monthly Return',\n    hue='Group',\n    palette='Set2'\n)\nplt.title('Unconditional Return Distribution by Period and Capital Rank Group')\nplt.axhline(0, color='gray', linestyle='--', linewidth=1)\nplt.ylabel('Monthly Return')\nplt.xlabel('Period')\nplt.legend(title='Group', loc='lower left')\nplt.tight_layout()\nplt.show()\n\n```\n\n- **Boxplot visualizations** reveal that in the post-2010 regime:\n  - The top decile (`r_top`) has **higher median returns** and a **narrower interquartile range** than the bottom 90% (`r_rest`).\n  - **Outliers on the downside virtually disappear** for `r_top`, while they persist—especially on both tails—for `r_rest`.\n  - The return distribution of `r_top` becomes increasingly **compact, upward-shifted, and volatility-suppressed**, resembling **a managed financial product** rather than a random equity basket.\n- These patterns imply that **risk-adjusted return asymmetry** is not just about mean differences, but about **structural volatility suppression** and downside risk elimination at the top.\n\n#### Gaussian Mixture Results: Two-Component Fit\n```{python}\n# GMM (k=2) for Top 10% and for Remining 90% \nimport os\nos.environ['LOKY_MAX_CPU_COUNT'] = '4'  # 사용하려는 코어 수를 직접 지정\n\n# 각 그룹의 return 시리즈\ntop_returns = df_mix['r_top'].dropna().values.reshape(-1, 1)\nrest_returns = df_mix['r_rest'].dropna().values.reshape(-1, 1)\n\n# GMM 적합 함수\ndef fit_gmm(data, n_components=2):\n    gmm = GaussianMixture(n_components=n_components, random_state=42)\n    gmm.fit(data)\n    return gmm\n\ngmm_top = fit_gmm(top_returns, n_components=2)\ngmm_rest = fit_gmm(rest_returns, n_components=2)\n\ndef print_gmm_summary(gmm, label):\n    print(f\"\\nGMM summary for {label}\")\n    for i, (w, mu, var) in enumerate(zip(gmm.weights_, gmm.means_, gmm.covariances_)):\n        print(f\" Component {i+1}: weight={w:.3f}, mean={mu[0]:.4f}, std={np.sqrt(var[0][0]):.4f}\")\n\nprint_gmm_summary(gmm_top, 'Top 10%')\nprint_gmm_summary(gmm_rest, 'Remaining 90%')\n```\n\nThe Gaussian Mixture Models (GMMs) estimated separately on `r_top` and `r_rest` uncover two key structural regimes:\n\n- Both groups exhibit **bimodal structure**, with one cluster capturing **low-mean, high-volatility returns**, and the other **positive-mean, low-volatility returns**.\n- However, for the **top decile**, the low-return regime has a **lower weight and tighter variance**, suggesting that even when shocks occur, they are **attenuated** within this elite group.\n- In contrast, the bottom 90% remains exposed to **broader volatility regimes**, maintaining a larger spread of possible outcomes.\n\n#### Testing Internal Heterogeneity in Top Decile\n```{python}\n# k Selection by AIC vs. BIC\n\nX = df_mix['r_top'].dropna().values.reshape(-1, 1)\n\naic_scores = []\nbic_scores = []\nks = range(1, 21)\n\nfor k in ks:\n    gmm = GaussianMixture(n_components=k, random_state=42)\n    gmm.fit(X)\n    aic_scores.append(gmm.aic(X))\n    bic_scores.append(gmm.bic(X))\n\n# Plot AIC vs BIC to visualize optimal k\nplt.plot(ks, aic_scores, label='AIC')\nplt.plot(ks, bic_scores, label='BIC')\nplt.xlabel('Number of Components (k)')\nplt.ylabel('Information Criterion')\nplt.legend()\nplt.title('Model Selection: AIC vs BIC')\nplt.grid(True)\nplt.show()\n\n```\n\nTo test whether the top decile itself contains further latent substructures, we estimate GMMs with increasing number of components ($k = 1, 2, ..., 20$). The result is striking:\n\n- Both AIC and BIC **increase monotonically** in $k$, indicating that **no additional latent components** significantly improve model fit.\n- The most parsimonious and interpretable solution is obtained at **$k = 2$ or even $k = 1$**, reinforcing the view that **a single dominant structural cluster** governs return generation at the top.\n\nThis suggests that return asymmetry may not stem from overlapping regimes or transitory factors, but rather from the structural dominance of a statistically persistent subgroup of mega-cap firms.\n\n### Summary Interpretation\n\nTogether, these results imply that:\n\n- The **top-decile portfolio behaves like a capital sink**—absorbing flows while insulating itself from market volatility.\n- **Market return is no longer the outcome of dispersed competition**, but rather **converges to a structurally locked elite**, supported by policy, passive flows, and indexation mechanics.\n- This undermines the classical view of a dynamic, risk-compensated market and instead points toward **structural rent extraction** by the few.\n\n\n## Capital Share Convexity: Quadratic Regression Evolution\n\n### Core Question:\n> Has capital become more concentrated in the top-ranked firms over time?\n\n### Framework & Method:\n- Cross-sectional regression at each $t$:\n\n  $$\n  \\text{CapShare}_{i,t} = \\alpha_t + \\beta_t \\cdot \\text{Rank}_i + \\gamma_t \\cdot \\text{Rank}_i^2 + \\varepsilon_{i,t}\n  $$\n\n  where $\\text{Rank}_i$ is percentile-based with state 1 = bottom 10%, ..., state 10 = top 10%.\n\n- The convexity of capital distribution is captured by $\\gamma_t$:\n  - $\\gamma_t > 0$ implies **increasing convexity**, or accelerated capital share at the top.\n\n- Time-series $\\{\\gamma_t\\}$ is visualized to show evolution of capital inequality.\n\n### Interpretation\n\n```{python}\n# Time-Series of Capital Share Convexity\n\n# 1. 각 날짜별로 state별 mktcap 합산 → CapShare_i 생성\ndef compute_capshare(df):\n    df = df.copy()\n    cap_by_state = df.groupby('state')['mktcap'].sum()\n    total_cap = cap_by_state.sum()\n    df['cap_share'] = df['state'].map(cap_by_state / total_cap)\n    return df\n\n# 2. cross-sectional regression에서 사용될 state별 요약 데이터 생성\ndef compute_quadratic_coefficients(df):\n    results = []\n    for date, group in df.groupby('date'):\n        # 유효한 state만 사용 (state 0은 제외)\n        group = group[group['state'] > 0].copy()\n        cap_by_state = group.groupby('state')['mktcap'].sum()\n        total_cap = cap_by_state.sum()\n        capshare = cap_by_state / total_cap\n\n        # x = state (1~10), y = capshare\n        x = capshare.index.values\n        y = capshare.values\n\n        X = np.column_stack([x, x**2])\n        X = sm.add_constant(X)\n        model = sm.OLS(y, X).fit()\n\n        results.append({\n            'date': date,\n            'alpha': model.params[0],\n            'beta': model.params[1],\n            'gamma': model.params[2],\n            'r_squared': model.rsquared\n        })\n\n    return pd.DataFrame(results)\n\n\ndef plot_gamma_time_series(gamma_df):\n    plt.figure(figsize=(12, 6))\n    plt.plot(gamma_df['date'], gamma_df['gamma'], label='Gamma (Quadratic Term)', color='darkred')\n\n    # 기준선들\n    plt.axhline(0, color='gray', linestyle='--', linewidth=1)\n    plt.axvline(pd.to_datetime(\"2010-01-01\"), color='black', linestyle='--', linewidth=1.2, label='2010 Breakpoint')\n    plt.title('Time-Series of Capital Share Convexity (γₜ)')\n    plt.xlabel('Date')\n    plt.ylabel('Gamma Coefficient (Convexity)')\n    plt.legend()\n    plt.grid(True)\n    plt.tight_layout()\n    plt.show()\n\ncrsp_filtered = crsp[crsp['state'] > 0].copy()\n\ngamma_df = compute_quadratic_coefficients(crsp_filtered)\n\nplot_gamma_time_series(gamma_df)\n```\nThe time-series of the capital share convexity coefficient, $\\gamma_t$, estimated via cross-sectional quadratic regressions, reveals a striking and persistent structure.\n\n```{python}\ngamma_df.drop('date', axis=1).describe()\n```\n\nAcross the full sample period (1996–2023), $\\gamma_t$ remains **consistently positive and tightly bounded**, with:\n\n- A mean value of approximately **0.0186**,  \n- A narrow interquartile range: [0.0181, 0.0192],  \n- A low standard deviation of **0.0007**, and  \n- R-squared values averaging **0.67**, indicating robust fit quality across time.\n\nThis **remarkable temporal consistency** suggests that the top ranks in the market-cap distribution have maintained a **structurally convex advantage**—absorbing disproportionately higher capital relative to their rank in nearly every month over the past three decades.\n\nA closer examination shows that:\n\n- Prior to 2010, there was **mild downward drift** in $\\gamma_t$, consistent with episodic rebalancing and potential capital redistribution (e.g., during the post-dotcom or pre-GFC phase).\n- However, **post-2010**, $\\gamma_t$ exhibits a **slight but stable upward trend**, indicating **reinforced convexity**—a steeper capital concentration curve among the top-ranked firms.\n\nThis empirical curvature echoes the shape of a **discrete Lorenz curve**, where $\\gamma_t$ can be interpreted as a **\"capital inequality curvature index\"**. In this framework, increases in $\\gamma_t$ correspond to a **more extreme dominance of top ranks**, consistent with both the **capital lock-in** and **transition persistence** mechanisms documented elsewhere in this study.\n\nImportantly, the tight dispersion and monotonic stabilization of $\\gamma_t$ provide indirect but compelling support for the **out-of-sample consistency** of capital-weight-based strategies. The fact that the quadratic relationship between rank and capshare is not only convex but also time-invariant implies that **a convex weighting scheme calibrated in-sample may remain optimal (or near-optimal) out-of-sample**.\n\nThis further reinforces the central hypothesis of the TBTF framework: **top capital positions are not merely episodic outcomes but persistent structural anchors** in modern financial markets.\n\n\n## Persistence and Lock-In Dynamics\n\n좋습니다. 아래는 `4_4_structure.qmd`의 *\"Persistence and Lock-In Dynamics\"* 섹션 중, **Markov transition matrix 추정 방식**을 실제 구현된 10×10 matrix 기반으로 **수정 및 보완**한 내용입니다. 핵심은 다음 두 가지입니다:\n\n1. 원래 open system에서 `state = 0`(탈락 또는 미관측 상태)을 포함한 11×11 matrix는 **완전히 닫힌 체계(closed system)**가 아님\n2. 본 분석은 실용적 접근으로 `state = 1–10` 범위에만 집중한 **pseudo-closed system**으로 제한하고, 이에 따른 해석상의 제약은 *추후 확장 연구*로 남긴다는 코멘트를 명시\n\n---\n\n## Persistence and Lock-In Dynamics\n\n### Core Question:\n> Is capital mobility declining, with firms increasingly **locked in** to top positions?\n\n### Framework & Method\n\n- **States** are defined as decile ranks of market capitalization:\n  - **State 10**: Top 10% (≥ 90th percentile)\n  - **States 6–9**: Upper middle 40% (50–90 percentile)\n  - **States 1–5**: Bottom 50%\n  - **State 0**: Delisted or unranked (excluded from main estimation)\n\n- Using CRSP panel data, we construct an empirical first-order Markov transition matrix:\n\n  $$\n  P_{ij} = \\Pr(\\text{state}_{t+1} = j \\mid \\text{state}_t = i)\n  $$\n\n- **Important Adjustment**:\n  - The original system includes **state 0**, representing delisting or unranked stocks.\n  - However, to focus on the relative dynamics of ranked firms and avoid structural imbalance caused by market entry/exit, we restrict the analysis to **states 1–10**, forming a **pseudo-closed system**.\n  - This restriction implicitly conditions on survival and omits net capital flow into or out of the system.\n  - A more comprehensive treatment including open-system dynamics (e.g., absorbing states, boundary flows) is deferred to future work.\n\n- We estimate:\n  - The 10×10 transition matrix $P_{ij}$ among ranked states only.\n  - **Diagonal elements** ($P_{ii}$): Represent state persistence or **retention probability**.\n  - **Off-diagonal elements**: Capture **mobility dynamics**, including upward or downward shifts.\n  - The **stationary distribution** $\\pi$ is computed via eigen decomposition:\n  \n    $$\n    \\pi' P = \\pi', \\quad \\sum_i \\pi_i = 1\n    $$\n\n- All transition counts are computed from actual firm-level changes in decile state based on monthly data, pre-processed to include both listing and delisting effects via augmented panel construction (`crsp_trunc`).\n\n\n### Interpretation\n\n```{python}\nimport sys\nimport os\n# 현재 경로 기준으로 상위 디렉토리로 경로 추가\nsys.path.append(os.path.abspath('../..'))\n\nimport tbtf_data\n\nff3 = tbtf_data.load_ff3_factors(start_date=crsp['date'].min(), end_date=crsp['date'].max())\ncrsp_trunc = tbtf_data.crsp_truncation(crsp,ff3)\n# crsp_full = tbtf_data.crsp_lifecycle(crsp_trunc)\n```\n\n```{python}\n# ================================================\n# transition_matrix : pd.DataFrame (10x10)\n# stationary_series : pd.Series (length 10)\n# ================================================\n\n# old-living만 선택 (full lifecycle이 없거나 right-truncated)\n#crsp_valid = crsp_full[crsp_full['lifetype'] == 'old-living'].copy()\n\n#print(\"The number of stocks from state 0 to any states:\", (crsp_trunc['state_lag'] == 0).sum())\n#print(\"The number of stocks from any states to state 0:\", (crsp_trunc['state'] == 0).sum())\n#print(\"The number of Total In-flow stocks during the sample period:\", (crsp_trunc['state_lag'] == 0).sum()-(crsp_trunc['state'] == 0).sum())\n\n# Transition matrix 계산 시점에서 filtering\n# 조건: state_lag ∈ [1, 10] AND state ∈ [1, 10]\ncrsp_valid = crsp_trunc.query(\"state > 0 and state_lag > 0\").copy()\n\n# Compute empirical transition counts\n# (state_lag → state) pair frequency table\ntransition_counts = (\n    crsp_valid\n    .groupby(['state_lag', 'state'])\n    .size()\n    .unstack(fill_value=0)\n    .sort_index()\n    .reindex(columns=range(1, 11), fill_value=0)  # Ensure all states 0 to 10 are present\n)\n\n# Convert counts to row-wise probabilities\n# Each row represents conditional distribution: P(next state | current state)\ntransition_matrix = transition_counts.div(transition_counts.sum(axis=1), axis=0)\n\n# Compute stationary distribution (long-run equilibrium distribution over states)\n# Method: Use eigen-decomposition of the transpose of the transition matrix\neigvals, eigvecs = np.linalg.eig(transition_matrix.T.values)\nstationary = np.real(eigvecs[:, np.isclose(eigvals, 1)])\n\n# Normalize to sum to 1\nstationary = stationary[:, 0]\nstationary_dist = stationary / stationary.sum()\n\n# Format for output\ntransition_matrix.index.name = 'From State'\ntransition_matrix.columns.name = 'To State'\n\nstationary_series = pd.Series(stationary_dist, index=transition_matrix.columns, name='Stationary Dist.')\n\n# Markov Transition Matrix Heatmap (States 0–10)\nimport seaborn as sns\n\nplt.figure(figsize=(10, 8))\nsns.heatmap(\n    transition_matrix,\n    annot=True,\n    fmt=\".3f\",\n    cmap=\"YlGnBu\",\n    linewidths=0.5,\n    cbar_kws={'label': 'Transition Probability'},\n    xticklabels=[f\"To {i}\" for i in transition_matrix.columns],\n    yticklabels=[f\"From {i}\" for i in transition_matrix.index]\n)\nplt.title(\"Markov Transition Matrix Heatmap (States 0–10)\")\nplt.xlabel(\"Next Period State\")\nplt.ylabel(\"Current Period State\")\nplt.tight_layout()\nplt.show()\n\n```\n\n\n```{python}\n# Long-Run Stationary Distribution by State (Excl. Exit)\n\n# Step 4: Compute stationary distribution\n# Method: Use eigen decomposition for the transpose of the transition matrix\neigvals, eigvecs = np.linalg.eig(transition_matrix.T.values)\nstationary = np.real(eigvecs[:, np.isclose(eigvals, 1)])\nstationary = stationary[:, 0]\nstationary_dist = stationary / stationary.sum()\n\n# Prepare final transition matrix and stationary distribution\ntransition_matrix.index.name = 'From State'\ntransition_matrix.columns.name = 'To State'\nstationary_series = pd.Series(stationary_dist, index=transition_matrix.columns, name=\"Stationary Dist.\")\n\n# State 1부터 10까지의 stationary probability\nstationary_series_nonzero = stationary_series.iloc[:]\n\n# Plot\nplt.figure(figsize=(8, 5))\nsns.barplot(\n    x=stationary_series_nonzero.index.astype(str),\n    y=stationary_series_nonzero.values,\n    color='steelblue',\n    edgecolor='black'\n)\n\n# Annotate each bar with its value\nfor i, val in enumerate(stationary_series_nonzero.values):\n    plt.text(i, val + 0.001, f\"{val:.3f}\", ha='center', va='bottom', fontsize=10)\n\n# Plot labels and formatting\nplt.title(\"Long-Run Stationary Distribution by State (Excl. Exit)\", fontsize=14)\nplt.xlabel(\"State (Market Cap Rank)\", fontsize=12)\nplt.ylabel(\"Stationary Probability\", fontsize=12)\nplt.xticks(rotation=0)\nplt.ylim(0, stationary_series_nonzero.max() + 0.01)\nplt.tight_layout()\nplt.show()\n\n```\n\nThe estimated **Markov transition matrix** and **stationary distribution**, constructed using only ranked states (States 1–10), reveal a structurally persistent yet more symmetric capital mobility structure than previously observed in open-system models that included State 0. By excluding delisted or unranked firms, this framework focuses on rank-to-rank transitions within the surviving universe of firms and captures a distinct form of intra-market hierarchy.\n\n**High Persistence at the Extremes**\n\nThe system continues to exhibit strong persistence at both ends of the distribution. In particular, the top decile (State 10) shows a self-transition probability of 0.972, implying an expected duration of over 36 months. This persistence confirms that once firms enter the top decile, they tend to remain there, reinforcing the notion that the highest tier functions as a quasi-absorbing state. \n\nSimilarly, the bottom decile (State 1) displays a self-transition probability of 0.931, also associated with prolonged durations. This bilateral persistence at the extremes suggests a structural form of capital stratification, where firms, once classified into the highest or lowest decile, tend to stay put. These two tails behave like boundary layers of the rank system, characterized by entrenchment rather than fluid mobility.\n\n**Mobility in the Middle**\n\nIn contrast, the middle states—especially States 4 and 5—display the lowest persistence, each with a diagonal transition probability near 0.79. These intermediate ranks represent the most unstable region of the system, acting as a transitory buffer between the stable top and bottom groups. Firms in these states face greater uncertainty and classification volatility, neither entrenched like the top-tier incumbents nor consistently relegated like small-cap firms. \n\nThis suggests that mid-cap firms are most exposed to competitive reshuffling. Their trajectories remain open-ended, with material probabilities of upward or downward movement depending on performance shocks or relative repricing, but with limited protection from persistent identity.\n\n**Absence of Exit/Entry Mechanisms**\n\nIn this formulation, the Markov chain excludes transitions into or out of State 0. As such, delisting and new entries are not explicitly modeled. This simplification defines a pseudo-closed system designed to examine intra-system mobility rather than open-market turnover. The exclusion of exit risk makes the estimated transition probabilities purely conditional on being within the ranked universe, ideal for studying relative capital stickiness but less suited for estimating attrition or survivorship.\n\nThis design choice removes the asymmetry introduced by non-reversible states such as delisting or IPO-based entry, which would otherwise distort the symmetry of the estimated chain. While this comes at the cost of completeness, it offers clarity in isolating the structural dynamics of persistence, volatility, and mobility within the active market.\n\n**Stationary Distribution: Skewed Toward Lower Deciles**\n\nThe estimated stationary distribution across ranked states displays a gradual but consistent decline from lower to higher ranks. State 1 exhibits the highest long-run probability, at approximately 16 percent, while State 10 stabilizes at around 8 percent. This pattern suggests that lower-ranked firms are more prevalent in the long run, at least in terms of count, even though they may not dominate capital or influence.\n\nTwo forces likely drive this skew: first, a disproportionately high entry frequency into the lower deciles, often from new listings or small restructurings; and second, a limited degree of upward mobility from these initial positions. The bottom deciles, while not formally absorbing, act as a sticky floor—consistently replenished by inflows yet rarely exited by transitions to higher states.\n\nThe implication is that mobility across ranks is asymmetric even within the active market. Structural regeneration happens predominantly at the bottom, while upward reallocation remains limited. This reinforces the interpretation of the capital market not as a fluid mobility engine, but as a system with hierarchical layers, each marked by different persistence dynamics and long-run outcomes.\n\n\n## Summary Table\n\n| Structural Channel | Mechanism                             | Interpretation                                                 |\n|--------------------|---------------------------------------|----------------------------------------------------------------|\n| Mixture            | Return as weighted sum of 2 subgroups | Top decile increasingly **drives aggregate performance**       |\n| Convexity          | Capital share as function of rank     | **Lorenz-type concentration** intensifies over time            |\n| Transition         | Markov dynamics of rank-state mobility| Top and Exit states are **quasi-absorbing**, path-dependent    |\n\n- **Top-decile persistence** reveals a form of **quasi-absorption**, where firms not only rise to the top but stay there disproportionately longer — effectively becoming \"**Too Big to Exit**.\"\n- **Middle-rank volatility** suggests **structural fragility**, with firms unable to stabilize or ascend — reflecting a \"**Fragile Middle**\" that lacks lasting competitive foothold.\n- **Lower-rank saturation** reflects **systemic bottlenecks**, where inflows into low deciles are not matched by upward mobility — indicating a \"**sticky floor**\" rather than an active ladder.\n- The **long-run distribution** reinforces this structure: capital is **not symmetrically mobile**, but increasingly trapped in persistent states. This challenges foundational assumptions in representative-agent models, suggesting instead that capital flows in financial markets obey a **hierarchical and inertial logic**, not a fluid or ergodic one."},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../styles.css"],"toc":true,"number-sections":true,"output-file":"4_4_structure.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.7.22","author":"gitSAM","date":"2025-03-31","bibliography":["references.bib"],"jupyter":"python3","theme":"cosmo","title":"04 Structure"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}